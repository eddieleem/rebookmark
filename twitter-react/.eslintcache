[{"/Users/moog/react/twitter-react/src/index.js":"1","/Users/moog/react/twitter-react/src/App.js":"2","/Users/moog/react/twitter-react/src/redux/store.js":"3","/Users/moog/react/twitter-react/src/redux/stateUtils.js":"4","/Users/moog/react/twitter-react/src/components/Auth.js":"5","/Users/moog/react/twitter-react/src/components/Main.js":"6","/Users/moog/react/twitter-react/src/redux/reducers.js":"7","/Users/moog/react/twitter-react/src/components/SignIn.js":"8","/Users/moog/react/twitter-react/src/components/SignUp.js":"9","/Users/moog/react/twitter-react/src/components/AuthStyle.js":"10","/Users/moog/react/twitter-react/src/components/MainStyle.js":"11","/Users/moog/react/twitter-react/src/components/Messages.js":"12","/Users/moog/react/twitter-react/src/components/Explore.js":"13","/Users/moog/react/twitter-react/src/components/Home.js":"14","/Users/moog/react/twitter-react/src/components/TweetDetail.js":"15","/Users/moog/react/twitter-react/src/components/PopHashtagList.js":"16","/Users/moog/react/twitter-react/src/components/Notifications.js":"17","/Users/moog/react/twitter-react/src/components/Bookmarks.js":"18","/Users/moog/react/twitter-react/src/components/ProfileMenu.js":"19","/Users/moog/react/twitter-react/src/components/TweetDialog.js":"20","/Users/moog/react/twitter-react/src/components/Suggestion.js":"21","/Users/moog/react/twitter-react/src/components/Profile.js":"22","/Users/moog/react/twitter-react/src/redux/actions.js":"23","/Users/moog/react/twitter-react/src/components/Identity.js":"24","/Users/moog/react/twitter-react/src/components/PopHashtag.js":"25","/Users/moog/react/twitter-react/src/components/Notification.js":"26","/Users/moog/react/twitter-react/src/components/TweetWriter.js":"27","/Users/moog/react/twitter-react/src/components/EditProfile.js":"28","/Users/moog/react/twitter-react/src/components/Tweet.js":"29","/Users/moog/react/twitter-react/src/components/FollowDialog.js":"30","/Users/moog/react/twitter-react/src/components/Logs.js":"31","/Users/moog/react/twitter-react/src/components/SpecialTextField.js":"32","/Users/moog/react/twitter-react/src/components/TweetWriterStyle.js":"33","/Users/moog/react/twitter-react/src/components/ListDialog.js":"34","/Users/moog/react/twitter-react/src/components/Log.js":"35","/Users/moog/react/twitter-react/src/components/LogsStyle.js":"36","/Users/moog/react/twitter-react/src/components/TweetText.js":"37","/Users/moog/react/twitter-react/src/components/TweetStyle.js":"38","/Users/moog/react/twitter-react/src/components/EditProfileStyle.js":"39","/Users/moog/react/twitter-react/src/components/NotificationsStyle.js":"40","/Users/moog/react/twitter-react/src/components/ProfileStyle.js":"41","/Users/moog/react/twitter-react/src/components/PopHashtagListStyle.js":"42","/Users/moog/react/twitter-react/src/components/ExploreStyle.js":"43"},{"size":684,"mtime":1629527825935,"results":"44","hashOfConfig":"45"},{"size":1378,"mtime":1629527825928,"results":"46","hashOfConfig":"45"},{"size":2434,"mtime":1629527825936,"results":"47","hashOfConfig":"45"},{"size":703,"mtime":1629527825936,"results":"48","hashOfConfig":"45"},{"size":1333,"mtime":1629527825928,"results":"49","hashOfConfig":"45"},{"size":7752,"mtime":1629527825930,"results":"50","hashOfConfig":"45"},{"size":9554,"mtime":1629527825935,"results":"51","hashOfConfig":"45"},{"size":2885,"mtime":1629527825932,"results":"52","hashOfConfig":"45"},{"size":5383,"mtime":1629527825932,"results":"53","hashOfConfig":"45"},{"size":959,"mtime":1629527825928,"results":"54","hashOfConfig":"45"},{"size":1434,"mtime":1629527825930,"results":"55","hashOfConfig":"45"},{"size":114,"mtime":1629527825930,"results":"56","hashOfConfig":"45"},{"size":2531,"mtime":1629527825929,"results":"57","hashOfConfig":"45"},{"size":1070,"mtime":1629527825929,"results":"58","hashOfConfig":"45"},{"size":1919,"mtime":1629527825933,"results":"59","hashOfConfig":"45"},{"size":1381,"mtime":1629530273212,"results":"60","hashOfConfig":"45"},{"size":1409,"mtime":1629527825931,"results":"61","hashOfConfig":"45"},{"size":116,"mtime":1629527825928,"results":"62","hashOfConfig":"45"},{"size":3172,"mtime":1629527825932,"results":"63","hashOfConfig":"45"},{"size":1019,"mtime":1629527825934,"results":"64","hashOfConfig":"45"},{"size":1688,"mtime":1629527825933,"results":"65","hashOfConfig":"45"},{"size":8239,"mtime":1629527825932,"results":"66","hashOfConfig":"45"},{"size":24845,"mtime":1629529778500,"results":"67","hashOfConfig":"45"},{"size":2429,"mtime":1629527825929,"results":"68","hashOfConfig":"45"},{"size":927,"mtime":1629527825931,"results":"69","hashOfConfig":"45"},{"size":3648,"mtime":1629527825931,"results":"70","hashOfConfig":"45"},{"size":3924,"mtime":1629527825934,"results":"71","hashOfConfig":"45"},{"size":4544,"mtime":1629527825928,"results":"72","hashOfConfig":"45"},{"size":10395,"mtime":1629527825933,"results":"73","hashOfConfig":"45"},{"size":3290,"mtime":1629527825929,"results":"74","hashOfConfig":"45"},{"size":419,"mtime":1629527825930,"results":"75","hashOfConfig":"45"},{"size":1353,"mtime":1629527825933,"results":"76","hashOfConfig":"45"},{"size":447,"mtime":1629527825934,"results":"77","hashOfConfig":"45"},{"size":2434,"mtime":1629527825930,"results":"78","hashOfConfig":"45"},{"size":2622,"mtime":1629527825930,"results":"79","hashOfConfig":"45"},{"size":1073,"mtime":1629527825930,"results":"80","hashOfConfig":"45"},{"size":1840,"mtime":1629527825934,"results":"81","hashOfConfig":"45"},{"size":866,"mtime":1629527825934,"results":"82","hashOfConfig":"45"},{"size":904,"mtime":1629527825929,"results":"83","hashOfConfig":"45"},{"size":1087,"mtime":1629527825931,"results":"84","hashOfConfig":"45"},{"size":1271,"mtime":1629527825932,"results":"85","hashOfConfig":"45"},{"size":362,"mtime":1629527825931,"results":"86","hashOfConfig":"45"},{"size":1252,"mtime":1629527825929,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"1dwinij",{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"90"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"90"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"90"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"90"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"90"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"90"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"90"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"90"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"90"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"90"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"90"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"90"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"90"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"90"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"90"},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"90"},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"/Users/moog/react/twitter-react/src/index.js",[],["192","193"],"/Users/moog/react/twitter-react/src/App.js",[],"/Users/moog/react/twitter-react/src/redux/store.js",[],"/Users/moog/react/twitter-react/src/redux/stateUtils.js",[],"/Users/moog/react/twitter-react/src/components/Auth.js",[],"/Users/moog/react/twitter-react/src/components/Main.js",["194"],"import React, {useEffect, useState} from 'react';\nimport {useTheme} from '@material-ui/core/styles';\nimport {\n    AppBar,\n    Button,\n    CssBaseline,\n    Divider,\n    Drawer,\n    Grid,\n    IconButton,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    Toolbar,\n    Typography\n} from '@material-ui/core';\nimport {\n    Bookmark as BookmarksIcon,\n    Explore as ExploreIcon,\n    Home as HomeIcon,\n    Menu as MenuIcon,\n    Message as MessageIcon,\n    Notifications as NotificationsIcon,\n    Person as ProfileIcon,\n} from '@material-ui/icons';\nimport {MainStyle} from \"./MainStyle\";\nimport {Link, Redirect, Route, Switch, useRouteMatch} from 'react-router-dom';\nimport Home from \"./Home\";\nimport Messages from \"./Messages\";\nimport Explore from \"./Explore\";\nimport Notifications from \"./Notifications\";\nimport Bookmarks from \"./Bookmarks\";\nimport Profile from \"./Profile\";\nimport PopHashtagList from \"./PopHashtagList\";\nimport ProfileMenu from \"./ProfileMenu\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport TweetDetail from \"./TweetDetail\";\nimport TweetDialog from \"./TweetDialog\";\nimport {connect} from \"react-redux\";\nimport Badge from \"@material-ui/core/Badge\";\nimport {notificationList} from \"../redux/actions\";\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\nimport Suggestion from \"./Suggestion\";\nimport {isStatePresent} from \"../redux/stateUtils\";\n\nconst loginAddress = \"/auth/sign-in\";\nconst menu = [\"Home\", \"Explore\", \"Notifications\", \"Messages\", \"Bookmarks\", \"Profile\", \"Suggestion\"];\nconst notLogged = [loginAddress, \"/Explore\", loginAddress, loginAddress, loginAddress, loginAddress, loginAddress];\nconst icons = [<HomeIcon/>, <ExploreIcon/>, <NotificationsIcon/>, <MessageIcon/>, <BookmarksIcon/>, <ProfileIcon/>, <GroupAddIcon/>];\n\n\n\nexport let READ_COUNT = 0;\nexport let TOTAL_COUNT = 0;\n\n\nfunction Main({userState, notifications, window, getNotifications}) {\n    const classes = MainStyle();\n    const theme = useTheme();\n    let {url} = useRouteMatch();\n    const logged = isStatePresent(userState);\n    \n    console.log(\"in main \", userState);\n    \n    useEffect(() => {\n        console.log(notifications);\n        setInterval(() => {\n            getNotifications();\n        }, 5000);\n    }, []);\n    \n    if (\"events\" in notifications && notifications.events !== null) {\n        if (notifications.events != null) TOTAL_COUNT = notifications.events.length;\n    }\n    \n    \n    const [mobileOpen, setMobileOpen] = useState(false);\n\n    const handleDrawerToggle = () => setMobileOpen(!mobileOpen);\n\n    const [openTweetDialog, setOpenTweetDialog] = useState(false);\n\n    const generateMenuItems = ()=> {\n        return menu.map((text, index) => (\n            <ListItem button key={text} component={Link}\n                      to={logged ? `/${menu[index].toLowerCase()}${index === 5 ? `/${userState.username}` : ''}` : notLogged[index].toLowerCase()}>\n                <ListItemIcon>{icons[index]}</ListItemIcon>\n                {\n                    text === \"Notifications\" ?\n                        <Badge color=\"secondary\" badgeContent={TOTAL_COUNT - READ_COUNT} onClick={() => {return READ_COUNT = TOTAL_COUNT}}>\n                            <ListItemText  primary={text}/>\n                        </Badge>\n                        : <ListItemText primary={text}/>\n                }\n            </ListItem>\n        ));\n    }\n\n\n    const drawer = (\n        <div className={classes.sideMenu}>\n            <div className={classes.toolbar}>\n            </div>\n            <Divider/>\n            <List>{generateMenuItems()}</List>\n            <Divider/>\n            {logged ?<Button className={classes.tweetButton} variant={\"contained\"} fullWidth\n                    color={\"primary\"} onClick={() => setOpenTweetDialog(true)}>Tweet</Button> : null}\n        </div>);\n\n    const container = window !== undefined ? () => window().document.body : undefined;\n\n    return (\n        <div className={classes.root}>\n            <TweetDialog open={openTweetDialog} setOpen={setOpenTweetDialog} />\n                <div>\n                    <CssBaseline/>\n                    <AppBar position=\"fixed\" className={classes.appBar}>\n                        <Toolbar>\n                            <IconButton color=\"inherit\" aria-label=\"open drawer\" edge=\"start\"\n                                        onClick={handleDrawerToggle} className={classes.menuButton}><MenuIcon/></IconButton>\n                            <Grid container alignItems={\"center\"} justify={\"space-between\"} spacing={3}>\n                                <Grid item><Typography variant=\"h6\" noWrap>Twitter</Typography></Grid>\n                                <Grid item><ProfileMenu/></Grid>\n                            </Grid>\n                        </Toolbar>\n                    </AppBar>\n                    <nav className={classes.drawer} aria-label=\"mailbox folders\">\n                        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n                        <Hidden smUp implementation=\"css\">\n                            <Drawer\n                                container={container}\n                                variant=\"temporary\"\n                                anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n                                open={mobileOpen}\n                                onClose={handleDrawerToggle}\n                                classes={{paper: classes.drawerPaper,}}\n                                ModalProps={{keepMounted: true,/* // Better open performance on mobile.*/}}>\n                                {drawer}\n                            </Drawer>\n                        </Hidden>\n                        <Hidden xsDown implementation=\"css\">\n                            <Drawer classes={{paper: classes.drawerPaper,}} variant=\"permanent\" open>{drawer}</Drawer>\n                        </Hidden>\n                    </nav>\n                </div>\n            <Grid container className={classes.content} alignItems={\"flex-start\"} justify={\"center\"}>\n                <Grid item xs={12}><div className={classes.toolbar}/></Grid>\n                <Grid item xs={11} md={9} lg={7} xl={5} className={classes.timeline}>\n                    <Switch>\n                        <Route exact path={\"/\"}>{logged ? <Home/> : <Redirect to={\"/auth/sign-in\"}/>}</Route>\n                        <Route path={`${url}${menu[0].toLowerCase()}`}>{logged ? <Home/> : <Redirect to={\"/auth/sign-in\"}/>}</Route>\n                        <Route path={`${url}${menu[1].toLowerCase()}`} component={Explore}/>\n                        <Route path={`${url}${menu[2].toLowerCase()}`}>{logged ? <Notifications /> : <Redirect to={\"/auth/sign-in\"}/>}</Route>\n                        <Route path={`${url}${menu[3].toLowerCase()}`}>{logged ? <Messages/> : <Redirect to={\"/auth/sign-in\"}/>}</Route>\n                        <Route path={`${url}${menu[4].toLowerCase()}`}>{logged ? <Bookmarks/> : <Redirect to={\"/auth/sign-in\"}/>}</Route>\n                        <Route path={`${url}${menu[5].toLowerCase()}/:username`}><Profile/></Route>\n                        <Route path={`${url}${menu[6].toLowerCase()}`}>{logged ? <Suggestion/> : <Redirect to={\"/auth/sign-in\"}/>}</Route>\n                        <Route path={`${url}tweet-detail/:id`}><TweetDetail/></Route>\n                    </Switch>\n                </Grid>\n                <Grid item md={false} lg={3} xl={3}><PopHashtagList/></Grid>\n            </Grid>\n\n        </div>\n    );\n}\n\n\nconst mapStateToProp = state => ({\n    userState: state.user,\n    notifications: state.notifications,\n});\n\nconst mapActionsToProp = dispatch => ({\n    getNotifications: () => dispatch(notificationList()),\n});\n\nexport default connect(mapStateToProp, mapActionsToProp)(Main);","/Users/moog/react/twitter-react/src/redux/reducers.js",["195","196","197","198","199","200","201","202","203","204","205","206"],"import {\n    LOGOUT,\n    SIGNIN_FAIL,\n    SIGNIN_INIT,\n    SIGNIN_SUCCESS,\n    SIGNUP_FAIL,\n    SIGNUP_INIT,\n    SIGNUP_SUCCESS,\n    GET_PROFILE_INIT,\n    GET_PROFILE_SUCCESS,\n    GET_PROFILE_FAIL,\n    STATE_NULL,\n    STATE_LOADING,\n    STATE_SUCCESS,\n    CREATE_TWEET_INIT,\n    CREATE_TWEET_SUCCESS,\n    CREATE_TWEET_FAIL,\n    TIMELINE_INIT,\n    DEL_TWEET_FAIL,\n    DEL_TWEET_INIT,\n    DEL_TWEET_SUCCESS,\n    GET_TWEET_INIT,\n    GET_TWEET_SUCCESS,\n    GET_TWEET_FAIL,\n    GET_LIKE_RET_TWEET_INIT,\n    GET_LIKE_RET_TWEET_SUCCESS,\n    GET_LIKE_RET_TWEET_FAIL,\n    LIKE_TWEET_INIT,\n    LIKE_TWEET_SUCCESS,\n    LIKE_TWEET_FAIL,\n    UNLIKE_TWEET_INIT,\n    UNLIKE_TWEET_SUCCESS,\n    UNLIKE_TWEET_FAIL,\n    RETWEET_INIT,\n    RETWEET_SUCCESS,\n    RETWEET_FAIL,\n    DEL_RETWEET_INIT,\n    DEL_RETWEET_SUCCESS,\n    DEL_RETWEET_FAIL,\n    UPDATE_PROFILE_INIT,\n    UPDATE_PROFILE_SUCCESS,\n    UPDATE_PROFILE_FAIL,\n    UPDATE_USER_INIT,\n    UPDATE_USER_SUCCESS,\n    UPDATE_USER_FAIL,\n    FOLLOW_INIT,\n    FOLLOW_SUCCESS,\n    FOLLOW_FAIL,\n    UNFOLLOW_INIT,\n    UNFOLLOW_SUCCESS,\n    UNFOLLOW_FAIL,\n    FOLLOW_LIST_INIT,\n    FOLLOW_LIST_SUCCESS,\n    FOLLOW_LIST_FAIL,\n    TIMELINE_SUCCESS,\n    TIMELINE_FAIL,\n    GET_TWEETS_INIT,\n    GET_TWEETS_SUCCESS,\n    GET_TWEETS_FAIL,\n    LOGS_INIT,\n    LOGS_SUCCESS,\n    LOGS_FAIL,\n    TWEET_ACTION_INIT,\n    TWEET_ACTION_SUCCESS,\n    TWEET_ACTION_FAIL,\n    SEARCH_INIT,\n    SEARCH_SUCCESS,\n    SEARCH_FAIL,\n    NOTIFICATIONS_INIT,\n    NOTIFICATIONS_SUCCESS,\n    NOTIFICATIONS_FAIL,\n    SUGGESTION_INIT, SUGGESTION_SUCCESS, SUGGESTION_FAIL, TRENDS_INIT, TRENDS_SUCCESS, TRENDS_FAIL,\n} from \"./actions\";\n\nconst createDefault = () => ({\n    state: STATE_NULL\n});\n\nconst initUser = createDefault();\nconst initProfile = createDefault();\nconst initCreateTweet = createDefault();\nconst initTimeline = createDefault();\nconst initDeleteTweet = createDefault();\nconst initGetTweet = createDefault();\nconst initLikeRetTweet = createDefault();\n\n// let prevLength = 0;\n\nconst generalReducer = (initState, action, types) => {\n    const {type, payload} = action;\n\n    switch (type) {\n        case types[0]:{ // init\n            return {\n                ...initState,\n                state: STATE_LOADING\n            };\n        }\n        case types[1]:{ // success\n            const {result} = payload;\n            // prevLength = \"events\" in result ? result.events.length - prevLength : 0;\n            return {\n                ...result,\n                // prevLength: prevLength,\n                state: STATE_SUCCESS\n            };\n        }\n        case types[2]:{ // fail\n            const {code} = payload;\n            return {\n                ...initState,\n                state: code\n            };\n        }\n        default:\n            return initState;\n    }\n};\n\nexport const authReducer = (userState = initUser, action) => {\n    const {type, payload} = action;\n    console.log(\"res \", type, payload);\n\n    switch (type) {\n        case SIGNUP_INIT: {\n            return {\n                ...userState,\n                state: STATE_LOADING\n            };\n        }\n        case SIGNUP_FAIL: {\n            const {code} = payload;\n            return {\n                ...userState,\n                state: code\n            };\n        }\n        case SIGNUP_SUCCESS: {\n            const {result} = payload;\n            return {\n                ...result,\n                state: STATE_SUCCESS\n            };\n        }\n        case SIGNIN_INIT: {\n            return {\n                ...userState,\n                state: STATE_LOADING\n            };\n        }\n        case SIGNIN_SUCCESS: {\n            const {result} = payload;\n            return {\n                ...result,\n                state: STATE_SUCCESS\n            };\n        }\n        case SIGNIN_FAIL: {\n            const {code} = payload;\n            return {\n                ...userState,\n                state: code\n            };\n        }\n        case LOGOUT: {\n            return {\n                state: STATE_NULL\n            };\n        }\n        default:\n            return userState;\n    }\n};\n\nexport const trendsReducer = (trendsState = createDefault(), action) => {\n    return generalReducer(trendsState, action, [TRENDS_INIT, TRENDS_SUCCESS, TRENDS_FAIL]);\n};\n\nexport const createTweetReducer = (createTweet = initCreateTweet, action) => {\n    const {type, payload} = action;\n\n    switch (type) {\n        case CREATE_TWEET_INIT:{\n            return {\n              ...createTweet,\n              state: STATE_LOADING\n            };\n        }\n        case CREATE_TWEET_SUCCESS:{\n            const {result} = payload;\n            return {\n                ...result,\n                state: STATE_SUCCESS\n            };\n        }\n        case CREATE_TWEET_FAIL:{\n            const {code} = payload;\n            return {\n                ...createTweet,\n                state: code\n            };\n        }\n        default:\n            return createTweet;\n    }\n}\n\nexport const profileReducer = (profileState = initProfile, action) => {\n    const {type, payload} = action;\n    \n    switch (type) {\n        case GET_PROFILE_INIT: {\n            return {\n                ...profileState,\n                state: STATE_LOADING\n            };\n        }\n        case GET_PROFILE_SUCCESS: {\n            const {profile} = payload;\n            return {\n                ...profile,\n                state: STATE_SUCCESS\n            };\n        }\n        case GET_PROFILE_FAIL: {\n            const {code} = payload;\n            return {\n                ...profileState,\n                state: code\n            };\n        }\n        default:\n            return profileState;\n    }\n}\n\nexport const timelineReducer = (timelineState = initTimeline, action) =>{\n    const {type, payload} = action;\n\n    switch (type) {\n        case TIMELINE_INIT: {\n            return {\n                ...timelineState,\n                state: STATE_LOADING\n            };\n        }\n        case TIMELINE_SUCCESS: {\n            const {result} = payload;\n            return {\n                ...result,\n                state: STATE_SUCCESS\n            };\n        }\n        case TIMELINE_FAIL: {\n            const {code} = payload;\n            return {\n                ...timelineState,\n                state: code\n            };\n        }\n        default:\n            return timelineState;\n    }\n}\n\nexport const getTweetsReducer = (tweetsState = createDefault(), action) =>{\n    return generalReducer(tweetsState,action,[GET_TWEETS_INIT,GET_TWEETS_SUCCESS,GET_TWEETS_FAIL])\n}\n\nexport const deleteTweetReducer = (deleteTweetState = initDeleteTweet, action) => {\n    const {type, payload} = action;\n\n    switch (type) {\n        case DEL_TWEET_INIT:{\n            return {\n                ...deleteTweetState,\n                state: STATE_LOADING\n            };\n        }\n        case DEL_TWEET_SUCCESS:{\n            const {result} = payload;\n            return {\n                ...result,\n                state: STATE_SUCCESS\n            };\n        }\n        case DEL_TWEET_FAIL:{\n            const {code} = payload;\n            return {\n                ...deleteTweetState,\n                state: code\n            };\n        }\n        default:\n            return deleteTweetState;\n    }\n};\n\nexport const getTweetReducer = (getTweetState = initGetTweet, action) => {\n    return generalReducer(getTweetState, action, [GET_TWEET_INIT, GET_TWEET_SUCCESS, GET_TWEET_FAIL]);\n};\n\nexport const getLikeRetTweetReducer = (likeRetTweetState = initLikeRetTweet, action) => {\n    return generalReducer(likeRetTweetState, action,\n        [GET_LIKE_RET_TWEET_INIT, GET_LIKE_RET_TWEET_SUCCESS, GET_LIKE_RET_TWEET_FAIL]);\n};\n\nexport const tweetActionsReducer = (tweetActionsReducer = createDefault(), action) =>{\n    return generalReducer(tweetActionsReducer, action, [TWEET_ACTION_INIT, TWEET_ACTION_SUCCESS, TWEET_ACTION_FAIL]);\n}\n\nexport const updateProfileReducer = (updateProfileState = createDefault(), action) => {\n    return generalReducer(updateProfileState, action, [UPDATE_PROFILE_INIT, UPDATE_PROFILE_SUCCESS, UPDATE_PROFILE_FAIL]);\n};\n\nexport const updateUserReducer = (updateUserState = createDefault(), action) => {\n    return generalReducer(updateUserState, action, [UPDATE_USER_INIT, UPDATE_USER_SUCCESS, UPDATE_USER_FAIL]);\n};\n\nexport const followReducer = (followState = createDefault(), action) => {\n    return generalReducer(followState, action, [FOLLOW_INIT, FOLLOW_SUCCESS, FOLLOW_FAIL]);\n};\n\nexport const unfollowReducer = (unfollowState = createDefault(), action) => {\n    return generalReducer(unfollowState, action, [UNFOLLOW_INIT, UNFOLLOW_SUCCESS, UNFOLLOW_FAIL]);\n};\n\nexport const followListReducer = (followListState = createDefault(), action) => {\n    return generalReducer(followListState, action, [FOLLOW_LIST_INIT, FOLLOW_LIST_SUCCESS, FOLLOW_LIST_FAIL]);\n};\n\nexport const logsReducer = (logsState = createDefault(), action) => {\n    return generalReducer(logsState, action, [LOGS_INIT, LOGS_SUCCESS, LOGS_FAIL]);\n};\n\nexport const searchReducer = (searchState = createDefault(), action) => {\n    return generalReducer(searchState, action, [SEARCH_INIT, SEARCH_SUCCESS, SEARCH_FAIL]);\n};\n\nexport const notificationsReducer = (notificationsState = createDefault(), action) => {\n    return generalReducer(notificationsState, action, [NOTIFICATIONS_INIT, NOTIFICATIONS_SUCCESS, NOTIFICATIONS_FAIL]);\n};\n\nexport const suggestionReducer = (suggestionState = createDefault(), action) => {\n    return generalReducer(suggestionState, action, [SUGGESTION_INIT, SUGGESTION_SUCCESS, SUGGESTION_FAIL]);\n};\n","/Users/moog/react/twitter-react/src/components/SignIn.js",[],"/Users/moog/react/twitter-react/src/components/SignUp.js",["207"],"import React, { useState} from 'react';\nimport {Avatar, Typography, Container, CssBaseline, TextField, Button, Grid} from \"@material-ui/core\";\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport {Link} from 'react-router-dom'\nimport {AuthStyle} from \"./AuthStyle\";\nimport {connect} from 'react-redux';\nimport {signup} from \"../redux/actions\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport {isStateFailed, isStateLoading} from \"../redux/stateUtils\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\n\n\nfunction SignUp({userState, signupUser}) {\n    const classes = AuthStyle();\n    const [fNameInput, setFName] = useState(\"\");\n    const [lNameInput, setLName] = useState(\"\");\n    const [usernameInput, setUsername] = useState(\"\");\n    const [emailInput, setEmail] = useState(\"\");\n    const [passwordInput, setPassword] = useState(\"\");\n\n\n    const handleSubmit = ev => {\n        ev.preventDefault();\n        const user = {\n            firstName: fNameInput,\n            lastName: lNameInput,\n            username: usernameInput,\n            email: emailInput,\n            password: passwordInput\n        };\n        signupUser(user);\n    };\n\n    const [dialogOpen, setDialogOpen] = React.useState(isStateFailed(userState));\n\n    const handleDialogOpen = () => setDialogOpen(true);\n\n    const handleDialogClose = () => setDialogOpen(false);\n\n\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline/>\n            <div className={classes.paper}>\n                {isStateLoading(userState) ? <LinearProgress className={classes.progress}/> : null}\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon/>\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Sign up\n                </Typography>\n                <form className={classes.form} onSubmit={handleSubmit} noValidate>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12} sm={6}>\n                            <TextField autoComplete=\"fname\" name=\"firstName\" variant=\"outlined\" required fullWidth\n                                       id=\"firstName\" label=\"First Name\" autoFocus\n                                       onChange={event => setFName(event.target.value)}/>\n                        </Grid>\n                        <Grid item xs={12} sm={6}>\n                            <TextField variant=\"outlined\" required fullWidth id=\"lastName\" label=\"Last Name\"\n                                       name=\"lastName\" autoComplete=\"lname\"\n                                       onChange={event => setLName(event.target.value)}/>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField variant=\"outlined\" required fullWidth id=\"username\"\n                                       label=\"Username\" name=\"username\" autoComplete=\"username\"\n                                       onChange={event => setUsername(event.target.value)}/>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField variant=\"outlined\" required fullWidth id=\"email\"\n                                       label=\"Email Address\" name=\"email\" autoComplete=\"email\" inputMode={\"email\"}\n                                       onChange={event => setEmail(event.target.value)}/>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField variant=\"outlined\" required fullWidth name=\"password\" label=\"Password\"\n                                       type=\"password\" id=\"password\" autoComplete=\"current-password\"\n                                       onChange={event => setPassword(event.target.value)}/>\n                        </Grid>\n                    </Grid>\n                    <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\" className={classes.submit}>Sign Up</Button>\n                    <Grid container justify=\"flex-end\">\n                        <Grid item><Link to={`sign-in`} variant=\"body2\">Already have an account? Sign in</Link></Grid>\n                    </Grid>\n                </form>\n            </div>\n            <Dialog\n                open={dialogOpen}\n                onClose={handleDialogClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\">\n                <DialogTitle id=\"alert-dialog-title\">{\"Failed to Sign Up\"}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">There was an error in sign-up.</DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleDialogClose} color=\"primary\">Close</Button>\n                </DialogActions>\n            </Dialog>\n        </Container>\n    );\n}\n\nconst mapStateToProp = state => ({\n    userState: state.user\n});\n\nconst mapActionsToProp = dispatch => ({\n    signupUser: user => dispatch(signup(user)),\n});\n\nexport default connect(mapStateToProp, mapActionsToProp)(SignUp);","/Users/moog/react/twitter-react/src/components/AuthStyle.js",[],"/Users/moog/react/twitter-react/src/components/MainStyle.js",[],"/Users/moog/react/twitter-react/src/components/Messages.js",[],"/Users/moog/react/twitter-react/src/components/Explore.js",["208"],"import React, {Fragment, useState} from \"react\";\nimport {Paper} from \"@material-ui/core\";\nimport {ExploreStyle} from \"./ExploreStyle\";\nimport Grid from \"@material-ui/core/Grid\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport SearchIcon from '@material-ui/icons/Search';\nimport {search} from \"../redux/actions\";\nimport {connect} from \"react-redux\";\nimport Tweet from \"./Tweet\";\nimport {useLocation} from 'react-router-dom';\nimport Identity from \"./Identity\";\n\nfunction Explore({searchState, userState, searchQuery}) {\n\tconst classes = ExploreStyle();\n\tlet query = new URLSearchParams(useLocation().search).get(\"query\");\n\tconst [textInput, setTextInput] = useState(\"\");\n\n\n\tconst searchHandler = (e) => {\n\t\tif (textInput.startsWith(\"#\")) {\n\t\t\tsearchQuery(\"hashtag\", textInput.slice(1));\n\t\t} else if (textInput.startsWith(\"@\")) {\n\t\t\tsearchQuery(\"user\", textInput.slice(1));\n\t\t} else {\n\t\t\tsearchQuery(\"tweet\", textInput);\n\t\t}\n\t};\n\t\n\tconst type = () => {return textInput.startsWith('#') ? \"hashtag\" : !textInput.startsWith('@') ? \"tweet\" : null};\n\t\n\treturn (\n\t\t<Paper className={classes.root}>\n\t\t\t<Grid item className={classes.header}>Explore</Grid>\n\t\t\t<AppBar position=\"relative\">\n\t\t\t\t<Toolbar>\n\t\t\t\t\t<div className={classes.search}>\n\t\t\t\t\t\t<div className={classes.searchIcon}>\n\t\t\t\t\t\t\t<SearchIcon/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<InputBase\n\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\tonChange={e => setTextInput(e.target.value)}\n\t\t\t\t\t\t\tonKeyPress={e => e.code === \"Enter\" || e.code === \"NumpadEnter\" ? searchHandler(e) : null}\n\t\t\t\t\t\t\tplaceholder=\"Search...\"\n\t\t\t\t\t\t\tclasses={{\n\t\t\t\t\t\t\t\troot: classes.inputRoot,\n\t\t\t\t\t\t\t\tinput: classes.inputInput,\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tinputProps={{'aria-label': 'search'}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</Toolbar>\n\t\t\t</AppBar>\n\t\t\t<Fragment>\n\t\t\t\t{\"tweets\" in searchState ? searchState.tweets.map(t => {\n\t\t\t\t\treturn <Tweet fallback=\"explore\" shit={{\n\t\t\t\t\t\ttype: type(),\n\t\t\t\t\t\tquery: type() === \"hashtag\" ? textInput.slice(1) : type() === \"tweet\" ? textInput : null,\n\t\t\t\t\t}} tweet={t} username={userState.username}/>\n\t\t\t\t}) : null}\n\t\t\t\t{\"users\" in searchState ? searchState.users.map(u => {\n\t\t\t\t\treturn <Identity identity={u}/>\n\t\t\t\t}) : null}\n\t\t\t</Fragment>\n\t\t</Paper>\n\t);\n}\n\nconst mapStateToProp = state => ({\n\tuserState: state.user,\n\tsearchState: state.search\n});\n\nconst mapActionsToProp = dispatch => ({\n\tsearchQuery: (type, query) => dispatch(search(type, query)),\n});\n\nexport default connect(mapStateToProp, mapActionsToProp)(Explore);\n\n","/Users/moog/react/twitter-react/src/components/Home.js",["209"],"import React, {useEffect} from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TweetWriter from \"./TweetWriter\";\nimport {connect} from \"react-redux\";\nimport {getTimeline} from \"../redux/actions\";\nimport Tweet from \"./Tweet\";\nimport {getUserProfileImg, isStatePresent} from \"../redux/stateUtils\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\n\nfunction Home({user, timeline, getTimeline}) {\n\n\n    useEffect(() => {\n        getTimeline();\n    }, []);\n\n    console.log(timeline);\n    return (\n        <Paper>\n            <TweetWriter fallback=\"timeline\"/>\n            {isStatePresent(timeline) ? timeline.tweets.map(each => <Tweet loc={\"timeline\"} profilePic={getUserProfileImg(each.owner.profile_picture)} tweet={each} username={user.username}/>):<LinearProgress/>}\n        </Paper>\n    );\n}\n\nconst mapStateToProp = state => ({\n    user: state.user,\n    timeline: state.timeline\n});\n\nconst mapActionsToProp = dispatch => ({\n    getTimeline: () => dispatch(getTimeline()),\n});\n\nexport default connect(mapStateToProp, mapActionsToProp)(Home);\n\n","/Users/moog/react/twitter-react/src/components/TweetDetail.js",["210"],"import React, {useEffect} from \"react\";\nimport {useParams} from 'react-router-dom';\nimport {getTweet} from \"../redux/actions\";\nimport {connect} from \"react-redux\";\nimport Tweet, {TWEET_DETAIL, TWEET_REPLY} from \"./Tweet\";\nimport {getUserProfileImg, isStatePresent} from \"../redux/stateUtils\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Card from \"@material-ui/core/Card\";\nimport {makeStyles} from \"@material-ui/core\";\n\nconst TweetDetailStyle = makeStyles((theme) => ({\n    commentTitle: {\n        padding: theme.spacing(1)\n    }\n}));\n\n\nfunction TweetDetail({userState,tweetState,getTweetById, list}) {\n    const classes = TweetDetailStyle();\n    const {id} = useParams();\n\n    useEffect(() => {\n        getTweetById(id);\n    }, [id]);\n    \n    return (\n        <Card>\n            {isStatePresent(tweetState) ? tweetState.parents.map(each=> <Tweet profilePic={getUserProfileImg(each.owner.profile_picture)} username={userState.username} tweet={each} /> ) : null}\n            {isStatePresent(tweetState) ? <Tweet type={TWEET_DETAIL} profilePic={getUserProfileImg(tweetState.owner.profile_picture)} username={userState.username} tweet={tweetState} list={list} fallback=\"detail\" shit={{id}} /> : null}\n            <Typography className={classes.commentTitle} variant={\"h6\"}>Comments</Typography>\n            <Divider/>\n            {isStatePresent(tweetState) ? tweetState.comments.map(each=> <Tweet type={TWEET_REPLY} profilePic={getUserProfileImg(each.owner.profile_picture)} username={userState.username} tweet={each} /> ) : null}\n        </Card>\n    );\n\n}\n\nconst mapStateToProp = state => ({\n    userState: state.user,\n    tweetState: state.getTweet,\n    list: state.likeRetTweet,\n});\n\nconst mapActionsToProp = dispatch => ({\n    getTweetById: (id) => dispatch(getTweet(id)),\n});\n\nexport default connect(mapStateToProp, mapActionsToProp)(TweetDetail);\n","/Users/moog/react/twitter-react/src/components/PopHashtagList.js",["211","212","213","214"],"import React, {useEffect} from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {PopHashtagListStyle} from \"./PopHashtagListStyle\";\nimport Divider from \"@material-ui/core/Divider\";\nimport PopHashtag from \"./PopHashtag\";\nimport {getTrends, notificationList} from \"../redux/actions\";\nimport {connect} from \"react-redux\";\nimport {isStatePresent} from \"../redux/stateUtils\";\n\n\nfunction PopHashtagList({trendsState,getTrends}) {\n    const style = PopHashtagListStyle();\n\n    useEffect(() => {\n        getTrends();\n    }, []);\n\n    return (\n        <Paper className={style.root}>\n            <Grid container>\n                <Grid item xs={12}>\n                    <Typography variant={\"h5\"} className={style.title}>What's Happening</Typography>\n                    <Grid item><Divider/></Grid>\n                </Grid>\n\n                {/* {isStatePresent(trendsState) ? trendsState.trends.map(each => <Grid item xs={12} className={style.hashtag}><PopHashtag hashtag={each}/></Grid>) : null} */}\n            </Grid>\n        </Paper>\n    );\n\n};\n\nconst mapStateToProp = state => ({\n    trendsState: state.trends\n});\n\nconst mapActionsToProp = dispatch => ({\n    getTrends: () => dispatch(getTrends()),\n});\n\nexport default connect(mapStateToProp, mapActionsToProp)(PopHashtagList);","/Users/moog/react/twitter-react/src/components/Notifications.js",["215"],"import React from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {NotificationsStyle} from \"./NotificationsStyle\";\nimport Notification from \"./Notification\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {notificationList} from \"../redux/actions\";\nimport {connect} from \"react-redux\";\nimport {isStatePresent} from \"../redux/stateUtils\";\nimport {READ_COUNT} from \"./Main\";\n\nfunction Notifications({notifications, getNotifications}) {\n    const style = NotificationsStyle();\n\t\n\t// READ_COUNT = \"events\" in notifications ? notifications.events.length : 0;\n \n\tif (notifications.state === -1) {\n\t\t// console.log(\"getting notifs\");\n\t\t// getNotifications();\n\t}\n\t\n\tconst comeOn = () => {\n\t\t// console.log(\"i am here, \", notifications);\n\t\treturn notifications.events.map(n => <Notification n={n} unread={true}/>);\n\t}\n    \n    return (\n        <Paper className={style.root}>\n            <Grid item className={style.header}>Notifications</Grid>\n            {\n                isStatePresent(notifications) && \"events\" in notifications && notifications.events.length > 0\n\t                ? comeOn() : null\n            }\n        </Paper>\n    );\n}\n\nconst mapStateToProp = state => ({\n    notifications: state.notifications,\n});\n\nconst mapActionsToProp = dispatch => ({\n    getNotifications: () => dispatch(notificationList()),\n});\n\nexport default connect(mapStateToProp, mapActionsToProp)(Notifications);\n\n","/Users/moog/react/twitter-react/src/components/Bookmarks.js",[],"/Users/moog/react/twitter-react/src/components/ProfileMenu.js",[],"/Users/moog/react/twitter-react/src/components/TweetDialog.js",[],"/Users/moog/react/twitter-react/src/components/Suggestion.js",["216","217","218","219","220","221","222","223","224"],"import {connect} from \"react-redux\";\nimport {makeStyles, Paper} from \"@material-ui/core\";\nimport {suggestionList} from \"../redux/actions\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport React, {Fragment} from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport Tweet from \"./Tweet\";\nimport Identity from \"./Identity\";\n\nconst SuggestionStyle = makeStyles((theme) => ({\n\troot: {},\n\theader: {\n\t\tborderRadius: \"15px 15px 0 0\",\n\t\tpaddingTop: theme.spacing(1),\n\t\tpaddingLeft: theme.spacing(1),\n\t\tfontSize: \"20px\",\n\t\tfontWeight: \"bold\",\n\t\tborderStyle: \"solid\",\n\t\tborderWidth: \"0 0 5px 0\",\n\t\tborderColor: \"lightblue\"\n\t},\n}));\n\nfunction Suggestion({suggestion, getSuggestion}) {\n\tconst classes = SuggestionStyle();\n\t\n\tif (suggestion.state === -1) {\n\t\tgetSuggestion();\n\t}\n\t\n\tconsole.log(suggestion);\n\t\n\treturn (\n\t\t<Paper className={classes.root}>\n\t\t\t<Grid item className={classes.header}>Suggestion</Grid>\n\t\t\t<Fragment>\n\t\t\t\t{\"users\" in suggestion ? suggestion.users.map(u => {\n\t\t\t\t\treturn <Identity identity={u}/>\n\t\t\t\t}) : null}\n\t\t\t</Fragment>\n\t\t</Paper>\n\t);\n}\n\nconst mapStateToProp = state => ({\n\tuserState: state.user,\n\tsuggestion: state.suggestion,\n});\n\nconst mapActionsToProp = dispatch => ({\n\tgetSuggestion: () => dispatch(suggestionList()),\n});\n\nexport default connect(mapStateToProp, mapActionsToProp)(Suggestion);\n","/Users/moog/react/twitter-react/src/components/Profile.js",["225"],"import React, {Fragment, useEffect, useState} from \"react\";\nimport {\n    Avatar,\n    Button,\n    Divider,\n    Grid,\n    Link as UILink,\n    Paper,\n    Tab,\n    Tabs,\n    Typography\n} from \"@material-ui/core\";\nimport {ProfileStyle} from \"./ProfileStyle\";\nimport {Link, Route, Switch, useParams, useRouteMatch} from \"react-router-dom\";\nimport {\n    Cake as BirthdayIcon,\n    CalendarToday as JoinDateIcon,\n    LocationOn as LocationIcon\n} from \"@material-ui/icons\";\nimport Logs from \"./Logs\";\nimport {follow, followList, getProfile, logs, unfollow} from \"../redux/actions\";\nimport {connect} from \"react-redux\";\nimport {getUserProfileImg, isStatePresent} from \"../redux/stateUtils\";\nimport FollowDialog from \"./FollowDialog\";\nimport EditProfile from \"./EditProfile\";\nimport Tweet from \"./Tweet\";\n\nconst PROFILE_FALLBACK = \"https://i.stack.imgur.com/34AD2.jpg\";\nconst HEADER_FALLBACK = \"https://www.tweetbrander.com/wp-content/uploads/2013/01/twitter-header-post-640x360.png\";\n\nconst getFollowingCount = state => isStatePresent(state) ? state.profile.followings.length : -1;\nconst getFollowersCount = state => isStatePresent(state) ? state.profile.followers.length : -1;\n\n\nfunction Profile({profileState, userState,followUser, unfollowUser, tweets, getUserProfile, getFollowList, followListState, logs, getLogs}) {\n    const classes = ProfileStyle();\n    let {url} = useRouteMatch();\n    let {username} = useParams();\n    const logged = isStatePresent(userState);\n\n    const [openFollowDialog, setOpenFollowDialog] = useState(false);\n    const [openEditDialog, setOpenEditDialog] = useState(false);\n\n    const [selectedTab, setSelectedTab] = useState(0);\n    const handleTabChange = (event, newValue) => setSelectedTab(newValue);\n\n\n    useEffect(() => {\n        getUserProfile(username);\n        getFollowList(username);\n        getLogs(username);\n    }, [username]);\n\n\n\n    const userProfile = {\n        username: isStatePresent(profileState) ? profileState.profile.username : \"Loading..\",\n        name: isStatePresent(profileState) ? profileState.profile.name : \"Loading..\",\n        bio: isStatePresent(profileState) ? profileState.profile.bio : \"Loading..\",\n        profilePicture: isStatePresent(profileState) && profileState.profile.profile_picture !== \"\" ? getUserProfileImg(profileState.profile.profile_picture) : PROFILE_FALLBACK,\n        header: isStatePresent(profileState) && profileState.profile.header_picture !== \"\" ? getUserProfileImg(profileState.profile.header_picture) : HEADER_FALLBACK\n    };\n\n    const handleFollow = (ev) => {\n        console.log(profileState.profile.username);\n        if (profileState.profile.is_following) unfollowUser(profileState.profile.username);\n        else followUser(profileState.profile.username);\n    };\n\n    const getHeaderButton = () => {\n        if (!logged || !isStatePresent(profileState)) return <Button className={`${classes.editButton} ${classes.invis}`}>Edit profile</Button>\n\n        if (profileState.profile.username === userState.username)\n            return <Button className={classes.editButton}\n                           variant={\"outlined\"}\n                           component={Link} to={`${url}`}\n                           onClick={() => setOpenEditDialog(true)}>Edit profile</Button>\n\n        else return <Button className={classes.editButton}\n                variant={profileState.profile.is_following ? \"contained\" : \"outlined\"}\n                            onClick={handleFollow}>\n            {profileState.profile.is_following ? 'Following' : 'Follow'}\n        </Button>\n    }\n\n    return (\n        <Paper className={classes.root}>\n            <FollowDialog logged={logged} followListState={followListState} open={openFollowDialog} setOpen={setOpenFollowDialog}/>\n\n            <Grid container spacing={0}>\n                <Grid item xs={12}>\n                    <img src={userProfile.header} className={classes.image} alt={\"random\"}/>\n                </Grid>\n                <Grid item xs={1} sm={8}><Avatar src={userProfile.profilePicture}\n                                                 className={classes.profileImage}/></Grid>\n                <Grid container xs={11} sm={4} justify={\"flex-end\"} spacing={2}>\n                    <Grid item>{getHeaderButton(profileState, userState)}</Grid>\n                    {/*<Route path={`${url}`}>*/}\n                    <EditProfile profile={userProfile} open={openEditDialog} setOpen={setOpenEditDialog}/>\n                    {/*</Route>*/}\n                </Grid>\n                <Grid item xs={12}><Typography className={classes.userName}>{userProfile.name}</Typography></Grid>\n                <Grid item xs={12}><Typography className={classes.bio}\n                                               variant={\"caption\"}>@{userProfile.username}</Typography></Grid>\n                <Grid item xs={12}>\n                    <Typography className={classes.bio}>{userProfile.bio}</Typography>\n                </Grid>\n                <Grid container xs={12} className={classes.bioInfoLayout}>\n                    <Typography display={\"inline\"} className={classes.bioInfo}><LocationIcon\n                        className={classes.bioInfoIcon}/>Mars</Typography>\n                    <Typography display={\"inline\"} className={classes.bioInfo}><BirthdayIcon\n                        className={classes.bioInfoIcon}/>Born December 13, 1999</Typography>\n                    <Typography display={\"inline\"} className={classes.bioInfo}><JoinDateIcon\n                        className={classes.bioInfoIcon}/>Joined August 2016</Typography>\n                </Grid>\n                <Grid container xs={12} className={classes.bioInfoLayout}>\n                    <Typography component={UILink} onClick={() => setOpenFollowDialog(true)}\n                                className={classes.bioInfo}>{getFollowingCount(profileState)} Followings</Typography>\n                    <Typography component={UILink} onClick={() => setOpenFollowDialog(true)}\n                                className={classes.bioInfo}>{getFollowersCount(profileState)} Followers</Typography>\n                </Grid>\n                <Grid item xs={12}>\n                    <Fragment>\n                        <Tabs value={selectedTab} onChange={handleTabChange}\n                              indicatorColor=\"primary\" textColor=\"primary\" variant={\"fullWidth\"}>\n                            <Tab label=\"Tweets\" component={Link} to={`${url}`}/>\n                            <Tab label=\"Tweets & replies\" component={Link} to={`${url}/with_replies`}/>\n                            <Tab label=\"Media\" component={Link} to={`${url}/media`}/>\n                            <Tab label=\"Logs\" component={Link} to={`${url}/logs`}/>\n                        </Tabs>\n                        <Divider/>\n                        <Switch>\n                            <Route exact path={`${url}`}>\n                                {isStatePresent(tweets) ? tweets.tweets.map(each => <Tweet fallback=\"profile\"  username={username} profilePic={getUserProfileImg(each.owner.profile_picture)}\n                                                                                           tweet={each}/>) : null}\n                            </Route>\n                            <Route path={`${url}/with_replies`}><h1>With Replies</h1></Route>\n                            <Route path={`${url}/media`}><h1>Media</h1></Route>\n                            <Route path={`${url}/logs`} ><Logs events={isStatePresent(logs) && \"events\" in logs ? logs.events : null}/></Route>\n                        </Switch>\n\n                    </Fragment>\n                </Grid>\n            </Grid>\n        </Paper>\n    );\n}\n\nconst mapStateToProp = state => ({\n    userState: state.user,\n    profileState: state.profile,\n    followListState: state.followList,\n    tweets: state.getTweets,\n    logs: state.logs,\n});\n\nconst mapActionsToProp = dispatch => ({\n    getUserProfile: (username) => dispatch(getProfile(username)),\n    getFollowList: (username) => dispatch(followList(username)),\n    followUser: (username) => dispatch(follow(username)),\n    unfollowUser: (username) => dispatch(unfollow(username)),\n    getLogs: (username) => dispatch(logs(username)),\n});\n\nexport default connect(mapStateToProp, mapActionsToProp)(Profile);\n","/Users/moog/react/twitter-react/src/redux/actions.js",["226"],"import axios from \"axios\";\nimport {createFail, createInit, createSuccess, isStatePresent} from \"./stateUtils\";\n\nexport const STATE_NULL = -1;\nexport const STATE_LOADING = 0;\nexport const STATE_SUCCESS = 1;\nexport const BASE_URL = \"http://localhost:8080\";\n// export const BASE_URL = \"https://immense-earth-01771.herokuapp.com\";\n\n// ****************** SIGN UP ************************\nexport const SIGNUP_INIT = \"SIGN_UP_INIT\";\nexport const SIGNUP_SUCCESS = \"SIGN_UP_SUCCESS\";\nexport const SIGNUP_FAIL = \"SIGN_UP_FAIL\";\n\nexport const signup = (user) => async (dispatch, getState) => {\n    dispatch(createInit(SIGNUP_INIT));\n    await axios({\n        baseURL: BASE_URL,\n        method: 'post',\n        url: '/signup',\n        contentType: 'application/json',\n        data: {\n            user: {\n                name: `${user.firstName} ${user.lastName}`,\n                username: user.username,\n                email: user.email,\n                password: user.password\n            }\n        }\n    })\n        .then(value => {\n            const result = {\n                ...value.data.user\n            };\n            dispatch(createSuccess(SIGNUP_SUCCESS,result));\n        })\n        .catch(error => {\n            printError(error);\n            dispatch(createFail(SIGNUP_FAIL,getErrorCode(error)));\n        });\n};\n\n// ****************** SIGN IN ************************\nexport const SIGNIN_INIT = \"SIGNIN_INIT\";\nexport const SIGNIN_SUCCESS = \"SIGNIN_SUCCESS\";\nexport const SIGNIN_FAIL = \"SIGNIN_FAIL\";\n\nexport const signin = (user) => async (dispatch, getState) => {\n    dispatch(createInit(SIGNIN_INIT));\n    await axios({\n        baseURL: BASE_URL,\n        method: 'post',\n        url: '/login',\n        contentType: 'application/json',\n        accept: '*/*',\n        data: {\n            user: {\n            \tusername: user.username,\n            \tname: user.name,\n                email: user.email,\n                password: user.password\n            }\n        }\n    })\n        .then(value => {\n            const result = {\n                ...value.data.user\n            }\n            dispatch(createSuccess(SIGNIN_SUCCESS,result));\n        })\n        .catch(error => {\n            printError(error);\n            dispatch(createFail(SIGNIN_FAIL,getErrorCode(error)));\n        });\n};\n\n// ****************** LOGOUT ************************\nexport const LOGOUT = \"LOGOUT\";\nexport const logoutUser = () => ({\n\ttype: LOGOUT\n});\n\n// ****************** CREATE TWEET ************************\nexport const CREATE_TWEET_INIT = \"CREATE_TWEET_INIT\";\nexport const CREATE_TWEET_SUCCESS = \"CREATE_TWEET_SUCCESS\";\nexport const CREATE_TWEET_FAIL = \"CREATE_TWEET_FAIL\";\nexport const createTweet = (tweet, fallback = \"\", props = {}) => async (dispatch, getState) => {\n    dispatch(createInit(CREATE_TWEET_INIT));\n    const {user} = getState();\n\n    const bodyFormData = new FormData();\n    bodyFormData.append(\"text\", tweet.text);\n    if (tweet.media != null) bodyFormData.append(\"media\", tweet.media);\n    if (tweet.parent != null) bodyFormData.append(\"parent\", tweet.parent);\n\n    await axios({\n        baseURL: BASE_URL,\n        method: 'post',\n        url: '/tweets',\n        data: bodyFormData,\n        headers: {\n            'Content-Type': 'multipart/form-data',\n            \"Authorization\": `Token ${user.token}`\n        }\n    })\n        .then(value => {\n            const result = {\n                ...value.data.tweet\n            }\n            dispatch(createSuccess(CREATE_TWEET_SUCCESS,result));\n\t        console.log(\"fallback and shit: \", fallback, props);\n            if (fallback === \"detail\" && \"id\" in props) dispatch(getTweet(props.id));\n            else if (fallback === \"timeline\") dispatch(getTimeline());\n            else if (fallback === \"profile\" && \"target\" in props) dispatch(getProfile(user.token, props.target));\n            else if (fallback === \"explore\" && \"type\" in props && \"query\" in props) dispatch(search(props.type, props.query));\n            else if (tweet.parent != null) dispatch(getTweet(tweet.parent));\n            else dispatch(getTimeline());\n        })\n        .catch(error => {\n            printError(error);\n            dispatch(createFail(CREATE_TWEET_FAIL,getErrorCode(error)));\n        });\n};\n\n// ****************** DELETE TWEET ************************\nexport const DEL_TWEET_INIT = \"DEL_TWEET_INIT\";\nexport const DEL_TWEET_SUCCESS = \"DEL_TWEET_SUCCESS\";\nexport const DEL_TWEET_FAIL = \"DEL_TWEET_FAIL\";\nexport const deleteTweet = (tweetId, loc) => async (dispatch, getState) => {\n    dispatch(createInit(DEL_TWEET_INIT));\n    const {user} = getState();\n\n    await axios({\n        baseURL: BASE_URL,\n        method: 'delete',\n        url: `/tweets/${tweetId}`,\n        headers: {\n            \"Authorization\": `Token ${user.token}`\n        }\n    })\n        .then(value => {\n            const result = {\n                ...value.data.tweet\n            }\n            dispatch(createSuccess(DEL_TWEET_SUCCESS,result));\n            loc === \"timeline\" ? dispatch(getTimeline()) : dispatch(getProfile(user.token, user.username));\n        })\n        .catch(error => {\n            printError(error);\n            dispatch(createFail(DEL_TWEET_FAIL,getErrorCode(error)));\n        });\n};\n\n// ****************** GET TWEET ************************\nexport const GET_TWEET_INIT = \"GET_TWEET_INIT\";\nexport const GET_TWEET_SUCCESS = \"GET_TWEET_SUCCESS\";\nexport const GET_TWEET_FAIL = \"GET_TWEET_FAIL\";\nexport const getTweet = (tweetId) => async (dispatch, getState) => {\n    dispatch(createInit(GET_TWEET_INIT));\n    const {user} = getState();\n\n    await axios({\n        baseURL: BASE_URL,\n        method: 'get',\n        url: `/tweets/${tweetId}`,\n    })\n        .then(value => {\n            const result = {\n                ...value.data.tweet\n            }\n            dispatch(createSuccess(GET_TWEET_SUCCESS,result));\n            dispatch(getLikeRetTweet(tweetId));\n        })\n        .catch(error => {\n            printError(error);\n            dispatch(createFail(GET_TWEET_FAIL,getErrorCode(error)));\n        });\n};\n\nexport const TWEET_ACTION_INIT = \"TWEET_ACTION_INIT\";\nexport const TWEET_ACTION_SUCCESS = \"TWEET_ACTION_SUCCESS\";\nexport const TWEET_ACTION_FAIL = \"TWEET_ACTION_FAIL\";\n\n// ****************** LIKE TWEET ************************\nexport const LIKE_TWEET_INIT = \"LIKE_TWEET_INIT\";\nexport const LIKE_TWEET_SUCCESS = \"LIKE_TWEET_SUCCESS\";\nexport const LIKE_TWEET_FAIL = \"LIKE_TWEET_FAIL\";\nexport const likeTweet = (tweetId) => async (dispatch, getState) => {\n    dispatch(createInit(TWEET_ACTION_INIT));\n    const {user} = getState();\n\n    await axios({\n        baseURL: BASE_URL,\n        method: 'post',\n        url: `/tweets/${tweetId}/like`,\n        headers: {\n            \"Authorization\": `Token ${user.token}`\n        }\n    })\n        .then(value => {\n            const result = {\n                ...value.data.tweet\n            }\n            dispatch(createSuccess(TWEET_ACTION_SUCCESS,result));\n        })\n        .catch(error => {\n            printError(error);\n            dispatch(createFail(TWEET_ACTION_FAIL,getErrorCode(error)));\n        });\n};\n\n// ****************** DELETE LIKE TWEET ************************\nexport const UNLIKE_TWEET_INIT = \"UNLIKE_TWEET_INIT\";\nexport const UNLIKE_TWEET_SUCCESS = \"UNLIKE_TWEET_SUCCESS\";\nexport const UNLIKE_TWEET_FAIL = \"UNLIKE_TWEET_FAIL\";\nexport const deleteLike = (tweetId) => async (dispatch, getState) => {\n    dispatch(createInit(TWEET_ACTION_INIT));\n    const {user} = getState();\n\n    await axios({\n        baseURL: BASE_URL,\n        method: 'delete',\n        url: `/tweets/${tweetId}/like`,\n        headers: {\n            \"Authorization\": `Token ${user.token}`\n        }\n    })\n        .then(value => {\n            const result = {\n                ...value.data.tweet\n            }\n            dispatch(createSuccess(TWEET_ACTION_SUCCESS,result));\n        })\n        .catch(error => {\n            printError(error);\n            dispatch(createFail(TWEET_ACTION_FAIL,getErrorCode(error)));\n        });\n};\n\n// ****************** RETWEET TWEET ************************\nexport const RETWEET_INIT = \"RETWEET_INIT\";\nexport const RETWEET_SUCCESS = \"RETWEET_SUCCESS\";\nexport const RETWEET_FAIL = \"RETWEET_FAIL\";\nexport const retweet = (tweetId) => async (dispatch, getState) => {\n    dispatch(createInit(TWEET_ACTION_INIT));\n    const {user} = getState();\n\n    await axios({\n        baseURL: BASE_URL,\n        method: 'post',\n        url: `/tweets/${tweetId}/retweet`,\n        headers: {\n            \"Authorization\": `Token ${user.token}`\n        }\n    })\n        .then(value => {\n            const result = {\n                ...value.data.tweet\n            }\n            dispatch(createSuccess(TWEET_ACTION_SUCCESS,result));\n        })\n        .catch(error => {\n            printError(error);\n            dispatch(createFail(TWEET_ACTION_FAIL,getErrorCode(error)));\n        });\n};\n\n// ****************** DELETE RETWEET TWEET ************************\nexport const DEL_RETWEET_INIT = \"DEL_RETWEET_INIT\";\nexport const DEL_RETWEET_SUCCESS = \"DEL_RETWEET_SUCCESS\";\nexport const DEL_RETWEET_FAIL = \"DEL_RETWEET_FAIL\";\nexport const deleteRetweet = (tweetId) => async (dispatch, getState) => {\n    dispatch(createInit(TWEET_ACTION_INIT));\n    const {user} = getState();\n\n    await axios({\n        baseURL: BASE_URL,\n        method: 'delete',\n        url: `/tweets/${tweetId}/retweet`,\n        headers: {\n            \"Authorization\": `Token ${user.token}`\n        }\n    })\n        .then(value => {\n            const result = {\n                ...value.data.tweet\n            }\n            dispatch(createSuccess(TWEET_ACTION_SUCCESS,result));\n        })\n        .catch(error => {\n            printError(error);\n            dispatch(createFail(TWEET_ACTION_FAIL,getErrorCode(error)));\n        });\n};\n\n// ****************** GET TIMELINE ************************\n\nexport const TIMELINE_INIT = \"TIMELINE_INIT\";\nexport const TIMELINE_SUCCESS = \"TIMELINE_SUCCESS\";\nexport const TIMELINE_FAIL = \"TIMELINE_FAIL\";\nexport const getTimeline = (dateCode=0) => async (dispatch, getState) => {\n    dispatch(createInit(TIMELINE_INIT));\n    const {user} = getState();\n\n    await axios({\n        baseURL: BASE_URL,\n        method: 'get',\n        url: `/home/${dateCode}`,\n        headers: {\n            \"Authorization\": `Token ${user.token}`\n        }\n    })\n        .then(value => {\n            const result = {\n                ...value.data\n            }\n            dispatch(createSuccess(TIMELINE_SUCCESS,result));\n        })\n        .catch(error => {\n            printError(error);\n            dispatch(createFail(TIMELINE_FAIL,getErrorCode(error)));\n        });\n}\n\n// ****************** GET Tweets ************************\n\nexport const GET_TWEETS_INIT = \"GET_TWEETS_INIT\";\nexport const GET_TWEETS_SUCCESS = \"GET_TWEETS_SUCCESS\";\nexport const GET_TWEETS_FAIL = \"GET_TWEETS_FAIL\";\nexport const getTweets = (tweetsIds) => async (dispatch, getState) => {\n    dispatch(createInit(GET_TWEETS_INIT));\n\n    await axios({\n        baseURL: BASE_URL,\n        method: 'post',\n        url: `/tweets/get`,\n        data: {\n            tweets: tweetsIds\n        }\n    })\n        .then(value => {\n            const result = {\n                ...value.data\n            }\n            dispatch(createSuccess(GET_TWEETS_SUCCESS,result));\n        })\n        .catch(error => {\n            printError(error);\n            dispatch(createFail(GET_TWEETS_FAIL,getErrorCode(error)));\n        });\n}\n\n// ****************** GET PROFILE ************************\n\nexport const GET_PROFILE_INIT = \"GET_PROFILE_INIT\";\nexport const getUserProfileInit = () => ({\n\ttype: GET_PROFILE_INIT,\n\tpayload: {\n\t\tcode: STATE_LOADING,\n\t}\n});\n\nexport const GET_PROFILE_SUCCESS = \"GET_PROFILE_SUCCESS\";\nexport const getUserProfileSuccess = result => ({\n\ttype: GET_PROFILE_SUCCESS,\n\tpayload: {\n\t\tcode: STATE_SUCCESS,\n\t\tprofile: result,\n\t}\n});\n\nexport const GET_PROFILE_FAIL = \"GET_PROFILE_FAIL\";\nexport const getUserProfileFail = code => ({\n\ttype: GET_PROFILE_FAIL,\n\tpayload: {\n\t\tcode: code,\n\t}\n});\n\nexport const getProfile = (username) => async (dispatch, getState) => {\n    dispatch(getUserProfileInit());\n    const {user} = getState();\n    let config = {\n        baseURL: BASE_URL,\n        method: 'get',\n        url: '/profiles/' + username,\n        contentType: 'application/json',\n    };\n\n    if (isStatePresent(user)) config = {\n        ...config,\n        headers: {\n            \"Authorization\": `Token ${user.token}`\n        }\n    }\n\n    await axios(config).then(value => {\n        const result = {\n            profile: value.data.profile,\n        }\n        dispatch(getUserProfileSuccess(result));\n        dispatch(getTweets(result.profile.tweets));\n    }).catch(error => {\n        printError(error);\n        dispatch(getUserProfileFail(getErrorCode(error)));\n    });\n};\n\n\n// ****************** UPDATE PROFILE ************************\nexport const UPDATE_PROFILE_INIT = \"UPDATE_PROFILE_INIT\";\nexport const UPDATE_PROFILE_SUCCESS = \"UPDATE_PROFILE_SUCCESS\";\nexport const UPDATE_PROFILE_FAIL = \"UPDATE_PROFILE_FAIL\";\nexport const updateProfile = (profile) => async (dispatch, getState) => {\n    dispatch(createInit(UPDATE_PROFILE_INIT));\n    const {user} = getState();\n\n    const bodyFormData = new FormData();\n    if (profile.name != null) bodyFormData.append(\"name\", profile.name);\n    if (profile.bio != null) bodyFormData.append(\"bio\", profile.bio);\n    if (profile.profilePicture != null) bodyFormData.append(\"profile_picture\", profile.profilePicture);\n    if (profile.header != null) bodyFormData.append(\"header_picture\", profile.header);\n\n    await axios({\n        baseURL: BASE_URL,\n        method: 'put',\n        url: `/profiles/${user.username}`,\n        data: bodyFormData,\n        headers: {\n            'Content-Type': 'multipart/form-data',\n            \"Authorization\": `Token ${user.token}`\n        }\n    })\n        .then(value => {\n            const result = {\n                ...value.data.profile\n            }\n            dispatch(createSuccess(UPDATE_PROFILE_SUCCESS,result));\n            dispatch(getProfile(user.username));\n            dispatch(updateProfilePic(result.profile_picture));\n        })\n        .catch(error => {\n            printError(error);\n            dispatch(createFail(UPDATE_PROFILE_FAIL,error.response.status));\n        });\n};\n\nexport const updateProfilePic = (profilePic) => async (dispatch, getState) => {\n    const {user} = getState();\n    const result = {\n        ...user,\n        profile_picture : profilePic\n    }\n    dispatch(createSuccess(SIGNIN_SUCCESS, result));\n};\n\n// ****************** UPDATE USER ************************\nexport const UPDATE_USER_INIT = \"UPDATE_USER_INIT\";\nexport const UPDATE_USER_SUCCESS = \"UPDATE_USER_SUCCESS\";\nexport const UPDATE_USER_FAIL = \"UPDATE_USER_FAIL\";\n\nexport const updateUser = (updatedUser) => async (dispatch, getState) => {\n    dispatch(createInit(UPDATE_USER_INIT));\n    const {user} = getState();\n    await axios({\n        baseURL: BASE_URL,\n        method: 'put',\n        url: `/user/${user.username}`,\n        data: {\n            user: {\n                username: updatedUser.username,\n                email: updatedUser.email,\n                password: updatedUser.password\n            }\n        },\n        headers: {\n            \"Authorization\": `Token ${user.token}`\n        }\n    })\n        .then(value => {\n            const result = {\n                ...value.data.user\n            };\n            dispatch(createSuccess(UPDATE_USER_SUCCESS,result));\n        })\n        .catch(error => {\n            printError(error);\n            dispatch(createFail(UPDATE_USER_FAIL,getErrorCode(error)));\n        });\n};\n\n// ****************** FOLLOW ************************\nexport const FOLLOW_INIT = \"FOLLOW_INIT\";\nexport const FOLLOW_SUCCESS = \"FOLLOW_SUCCESS\";\nexport const FOLLOW_FAIL = \"FOLLOW_FAIL\";\n\nexport const follow = (username) => async (dispatch, getState) => {\n    dispatch(createInit(FOLLOW_INIT));\n    const {user} = getState();\n    await axios({\n        baseURL: BASE_URL,\n        method: 'post',\n        url: `/profiles/${username}/follow`,\n        headers: {\n            \"Authorization\": `Token ${user.token}`\n        }\n    })\n        .then(value => {\n            const result = {\n                ...value.data.profile\n            };\n            dispatch(createSuccess(FOLLOW_SUCCESS, result));\n            dispatch(getProfile(username));\n        })\n        .catch(error => {\n            printError(error);\n            dispatch(createFail(FOLLOW_FAIL,getErrorCode(error)));\n        });\n};\n\n// ****************** UNFOLLOW ************************\nexport const UNFOLLOW_INIT = \"UNFOLLOW_INIT\";\nexport const UNFOLLOW_SUCCESS = \"UNFOLLOW_SUCCESS\";\nexport const UNFOLLOW_FAIL = \"UNFOLLOW_FAIL\";\n\nexport const unfollow = (username) => async (dispatch, getState) => {\n    dispatch(createInit(UNFOLLOW_INIT));\n    const {user} = getState();\n    await axios({\n        baseURL: BASE_URL,\n        method: 'delete',\n        url: `/profiles/${username}/follow`,\n        headers: {\n            \"Authorization\": `Token ${user.token}`\n        }\n    })\n        .then(value => {\n            const result = {\n                ...value.data.profile\n            };\n            dispatch(createSuccess(UNFOLLOW_SUCCESS, result));\n            dispatch(getProfile(username));\n        })\n        .catch(error => {\n            printError(error);\n            dispatch(createFail(UNFOLLOW_FAIL,getErrorCode(error)));\n        });\n};\n\n// ****************** FOLLOWING FOLLOWER LIST ************************\nexport const FOLLOW_LIST_INIT = \"FOLLOW_LIST_INIT\";\nexport const FOLLOW_LIST_SUCCESS = \"FOLLOW_LIST_SUCCESS\";\nexport const FOLLOW_LIST_FAIL = \"FOLLOW_LIST_FAIL\";\n\nexport const followList = (username) => async (dispatch, getState) => {\n    dispatch(createInit(FOLLOW_LIST_INIT));\n    const {user} = getState();\n\n    let config = {\n        baseURL: BASE_URL,\n        method: 'get',\n        url: `/profiles/${username}/list`,\n        contentType: 'application/json',\n    };\n\n    if (isStatePresent(user)) config = {\n        ...config,\n        headers: {\n            \"Authorization\": `Token ${user.token}`\n        }\n    }\n\n    await axios(config)\n        .then(value => {\n            const result = {\n                ...value.data\n            };\n            dispatch(createSuccess(FOLLOW_LIST_SUCCESS,result));\n        })\n        .catch(error => {\n            printError(error);\n            dispatch(createFail(FOLLOW_LIST_FAIL,getErrorCode(error)));\n        });\n};\n\n// ****************** LOGS LIST ************************\nexport const LOGS_INIT = \"LOGS_INIT\";\nexport const LOGS_SUCCESS = \"LOGS_SUCCESS\";\nexport const LOGS_FAIL = \"LOGS_FAIL\";\n\nexport const logs = (username) => async (dispatch, getState) => {\n\tdispatch(createInit(LOGS_INIT));\n\tconst {user} = getState();\n\tawait axios({\n\t    baseURL: BASE_URL,\n\t    method: 'get',\n\t    url: `/profiles/${username}/logs`,\n\t    headers: {\n\t        \"Authorization\": `Token ${user.token}`\n\t    }\n\t})\n\t    .then(value => {\n\t        const result = {\n\t            ...value.data\n\t        };\n\t        dispatch(createSuccess(LOGS_SUCCESS, result));\n\t    })\n\t    .catch(error => {\n\t        printError(error);\n\t        dispatch(createFail(LOGS_FAIL, getErrorCode(error)));\n\t    });\n};\n\n// ****************** SEARCH *************************************\nexport const SEARCH_INIT = \"SEARCH_INIT\";\nexport const SEARCH_SUCCESS = \"SEARCH_SUCCESS\";\nexport const SEARCH_FAIL = \"SEARCH_FAIL\";\n\nexport const search = (type, query) => async (dispatch, getState) => {\n    dispatch(createInit(SEARCH_INIT));\n\tconst {user} = getState();\n    await axios({\n        baseURL: BASE_URL,\n        method: type === \"tweet\" ? \"post\" : \"get\",\n        url: type === \"hashtag\" ? `/search/hashtag?query=${query}` :\n            type === \"user\" ? `/search/username?query=${query}` : `/search/tweet`,\n        data: type === \"tweet\" ? {\"query\": query} : null,\n\t    headers: {\n\t\t    \"Authorization\": \"token\" in user ? `Token ${user.token}` : \"\",\n\t    },\n    })\n        .then(value => {\n            const result = {\n                ...value.data\n            };\n            dispatch(createSuccess(SEARCH_SUCCESS, result));\n        })\n        .catch(error => {\n            printError(error);\n            dispatch(createFail(SEARCH_FAIL, getErrorCode(error)));\n        });\n};\n\n// ******************** NOTIFICATION LIST **************************\nexport const NOTIFICATIONS_INIT = \"NOTIFICATION_INIT\";\nexport const NOTIFICATIONS_SUCCESS = \"NOTIFICATION_SUCCESS\";\nexport const NOTIFICATIONS_FAIL = \"NOTIFICATION_FAIL\";\n\nexport const notificationList = () => async (dispatch, getState) => {\n\tdispatch(createInit(NOTIFICATIONS_INIT));\n\tconst {user} = getState();\n\tawait axios({\n\t\tbaseURL: BASE_URL,\n\t\tmethod: \"get\",\n\t\turl: `/profiles/${user.username}/notifications`,\n\t\theaders: {\n\t\t\t\"Authorization\": `Token ${user.token}`\n\t\t},\n\t})\n\t\t.then(value => {\n\t\t\tconst result = {\n\t\t\t\t...value.data,\n\t\t\t};\n\t\t\tconsole.log(result);\n\t\t\tdispatch(createSuccess(NOTIFICATIONS_SUCCESS, result));\n\t\t})\n\t\t.catch(error => {\n\t\t\tprintError(error);\n\t\t\tdispatch(createFail(NOTIFICATIONS_FAIL, getErrorCode(error)));\n\t\t});\n};\n\n// ********************* SUGGESTION LIST **************************\nexport const SUGGESTION_INIT = \"SUGGESTION_INIT\";\nexport const SUGGESTION_SUCCESS = \"SUGGESTION_SUCCESS\";\nexport const SUGGESTION_FAIL = \"SUGGESTION_FAIL\";\n\nexport const suggestionList = () => async (dispatch, getState) => {\n    dispatch(createInit(SUGGESTION_INIT));\n    const {user} = getState();\n    await axios({\n        baseURL: BASE_URL,\n        method: \"get\",\n        url: `/suggestions`,\n        headers: {\n            \"Authorization\": `Token ${user.token}`\n        },\n    })\n        .then(value => {\n            const result = {\n                ...value.data,\n            };\n            dispatch(createSuccess(SUGGESTION_SUCCESS, result));\n        })\n        .catch(error => {\n            printError(error);\n            dispatch(createFail(SUGGESTION_FAIL, getErrorCode(error)));\n        });\n};\n\n// ****************** GET LIKE RETWEET of TWEET ************************\nexport const GET_LIKE_RET_TWEET_INIT = \"GET_LIKE_RET_TWEET_INIT\";\nexport const GET_LIKE_RET_TWEET_SUCCESS = \"GET_LIKE_RET_TWEET_SUCCESS\";\nexport const GET_LIKE_RET_TWEET_FAIL = \"GET_LIKE_RET_TWEET_FAIL\";\nexport const getLikeRetTweet = (tweetId) => async (dispatch, getState) => {\n    dispatch(createInit(GET_LIKE_RET_TWEET_INIT));\n    const {user} = getState();\n    \n    await axios({\n        baseURL: BASE_URL,\n        method: 'get',\n        url: `/tweets/${tweetId}/list`,\n        headers: {\n            \"Authorization\": `Token ${user.token}`\n        }\n    })\n        .then(value => {\n            const result = {\n                ...value.data\n            }\n            dispatch(createSuccess(GET_LIKE_RET_TWEET_SUCCESS,result));\n        })\n        .catch(error => {\n            printError(error);\n            dispatch(createFail(GET_LIKE_RET_TWEET_FAIL,getErrorCode(error)));\n        });\n};\n\n// ****************** GET TRENDS ************************\nexport const TRENDS_INIT = \"TRENDS_INIT\";\nexport const TRENDS_SUCCESS = \"TRENDS_SUCCESS\";\nexport const TRENDS_FAIL = \"TRENDS_FAIL\";\nexport const getTrends = () => async (dispatch, getState) => {\n    dispatch(createInit(TRENDS_INIT));\n\n    await axios({\n        baseURL: BASE_URL,\n        method: 'get',\n        url: `/trends`,\n    })\n        .then(value => {\n            const result = {\n                ...value.data\n            }\n            dispatch(createSuccess(TRENDS_SUCCESS,result));\n        })\n        .catch(error => {\n            printError(error);\n            dispatch(createFail(TRENDS_FAIL,getErrorCode(error)));\n        });\n}\n\nfunction printError(error) {\n\tif (error.response) {\n\t\t// The request was made and the server responded with a status code\n\t\t// that falls out of the range of 2xx\n\t\tconsole.log(error.response.data);\n\t\tconsole.log(error.response.status);\n\t\tconsole.log(error.response.headers);\n\t} else if (error.request) {\n\t\t// The request was made but no response was received\n\t\t// `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n\t\t// http.ClientRequest in node.js\n\t\tconsole.log(error.request);\n\t} else {\n\t\t// Something happened in setting up the request that triggered an Error\n\t\tconsole.log('Error', error.message);\n\t}\n\tconsole.log(error.config);\n}\n\nfunction getErrorCode(error) {\n    if (error.response) return error.response.status;\n    else if (error.request) {\n        // The request was made but no response was received\n        // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n        // http.ClientRequest in node.js\n        console.log(error.request);\n        return 1000;\n    } else {\n        // Something happened in setting up the request that triggered an Error\n        console.log('Error', error.message);\n        return 2000;\n    }\n}\n","/Users/moog/react/twitter-react/src/components/Identity.js",[],"/Users/moog/react/twitter-react/src/components/PopHashtag.js",[],"/Users/moog/react/twitter-react/src/components/Notification.js",["227","228","229","230","231","232"],"import Card from \"@material-ui/core/Card\";\nimport React from \"react\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport {NotificationsStyle} from \"./NotificationsStyle\";\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport RepeatIcon from '@material-ui/icons/Repeat';\nimport PersonIcon from '@material-ui/icons/Person';\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n\tdeleteLike,\n\tdeleteRetweet,\n\tdeleteTweet, getProfile, getTweet,\n\tlikeTweet,\n\tretweet\n} from \"../redux/actions\";\nimport {connect} from \"react-redux\";\nimport {Link, useRouteMatch} from \"react-router-dom\";\nimport Tweet from \"./Tweet\";\n\nfunction isRTL(s) {\n\tconst ltrChars = 'A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02B8\\u0300-\\u0590\\u0800-\\u1FFF'\n\t\t+ '\\u2C00-\\uFB1C\\uFDFE-\\uFE6F\\uFEFD-\\uFFFF';\n\tconst rtlChars = '\\u0591-\\u07FF\\uFB1D-\\uFDFD\\uFE70-\\uFEFC';\n\tconst rtlDirCheck = new RegExp('^[^' + ltrChars + ']*[' + rtlChars + ']');\n\t\n\treturn rtlDirCheck.test(s);\n}\n\nfunction Notification({n, userState, unread, getT}) {\n\tconst classes = NotificationsStyle();\n\t// need to change these to actual input\n\tlet {url} = useRouteMatch();\n\tconst avatarURLs = [\n\t\tn.source.profile_picture,\n\t];\n\tconst blueShade = unread;\n\tconst srcName = n.source.name;\n\tconst type = n.mode;\n\tconst regex = n.content.toString().match(new RegExp(\"Tweet (.*) at\"));\n\tconst tweetText = regex !== null ? regex[1] : \"\";\n\tconst dir = isRTL(tweetText.split(' ')[0]) ? \"rtl\" : \"ltr\";\n\tconst typeMap = {\n\t\t\"Like\": <FavoriteIcon className={classes.icon}\n\t\t                      style={{color: \"#ff0000\"}}/>,\n\t\t\"Follow\": <PersonIcon className={classes.icon}\n\t\t                      style={{color: \"#0099ff\"}}/>,\n\t\t\"Retweet\": <RepeatIcon className={classes.icon}\n\t\t                       style={{color: \"#2ae000\"}}/>,\n\t}\n\tconst remainingText = {\n\t\t\"Like\": avatarURLs.length > 1 ? <Grid item><Typography\n\t\t\tdisplay={\"inline\"}>and {avatarURLs.length - 1} others liked your\n\t\t\ttweet.</Typography></Grid> : <Grid item><Typography\n\t\t\tdisplay={\"inline\"}>liked your tweet.</Typography></Grid>,\n\t\t\"Follow\": <Grid item><Typography display={\"inline\"}>followed\n\t\t\tyou.</Typography></Grid>,\n\t\t\"Retweet\": <Grid item><Typography display={\"inline\"}>retweeted your\n\t\t\ttweet.</Typography></Grid>,\n\t}\n\t\n\tconst showTweet = () => {\n\t\tif (n !== undefined && \"tweet\" in n && n.tweet.id !== undefined && type !== \"Follow\") {\n\t\t\tgetT(n.tweet.id);\n\t\t\treturn <Tweet tweet={n.tweet} fallback=\"timeline\"/>\n\t\t}\n\t}\n\t\n\treturn (\n\t\t<Card square className={classes.root}>\n\t\t\t<CardActionArea>\n\t\t\t\t<Grid container className={classes.notification} style={blueShade ? {backgroundColor: \"#d6edff\"} : null}>\n\t\t\t\t\t{typeMap[type]}\n\t\t\t\t\t<div className={classes.profilePictures}>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tavatarURLs.map((url) => {\n\t\t\t\t\t\t\t\treturn <Avatar item src={url} className={classes.picture}/>\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t\t<Grid container className={classes.text}>\n\t\t\t\t\t\t<Grid item>\n\t\t\t\t\t\t\t<Typography display={\"inline\"} className={classes.sourceName}>\n\t\t\t\t\t\t\t\t{srcName}\n\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t{remainingText[type]}\n\t\t\t\t\t</Grid>\n\t\t\t\t\t<Grid container component={Link} to={`${url.slice(0, -url.indexOf('/'))}/tweet-detail/${n.tweet.id}`} className={classes.tweet} style={{direction: dir}} onClick={showTweet}>\n\t\t\t\t\t\t{tweetText}\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\t\t\t</CardActionArea>\n\t\t</Card>\n\t);\n};\n\nconst mapStateToProp = state => ({\n\tuserState: state.user,\n});\n\nconst mapActionsToProp = dispatch => ({\n\tgetT: (id) => dispatch(getTweet(id)),\n});\n\nexport default connect(mapStateToProp, mapActionsToProp)(Notification);\n","/Users/moog/react/twitter-react/src/components/TweetWriter.js",["233","234"],"import React, {useRef, useState} from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {\n    Image as MediaIcon,\n    Gif as GifIcon,\n    Poll as PollIcon,\n    EmojiEmotionsOutlined as EmojiIcon,\n    Schedule as ScheduleIcon\n\n} from \"@material-ui/icons\";\nimport {TweetWriterStyle} from \"./TweetWriterStyle\";\nimport Button from \"@material-ui/core/Button\";\nimport Divider from \"@material-ui/core/Divider\";\nimport SpecialTextField from \"./SpecialTextField\";\nimport {createTweet} from \"../redux/actions\";\nimport {connect} from \"react-redux\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport {getUserProfileImg, isStateLoading} from \"../redux/stateUtils\";\n\nfunction TweetWriter({userState, createState, createTweet, parent, setDialogClose, fallback, shit}) {\n    const style = TweetWriterStyle();\n    const tweetText = useRef(null);\n    const [media, setMedia] = useState(null);\n    const [mediaPrev, setMediaPrev] = useState(\"\");\n    // todo : clear output after sending tweet\n\n    const onMediaChange = ev => {\n        const file = ev.target.files[0];\n        setMedia(file);\n\n        let reader = new FileReader();\n        reader.onload = ev1 => setMediaPrev(ev1.target.result);\n        reader.readAsDataURL(file);\n    };\n\n\n    const onSend = ev => {\n        const tweet = {\n            text: tweetText.current.value,\n            media: media,\n            parent: parent\n        };\n\n        // tweetText.current.value = \"\";\n        createTweet(tweet, fallback, shit);\n        if (setDialogClose != null) setDialogClose();\n\n        setMediaPrev(\"\");\n    };\n\n    return (\n        <>\n            <Grid container className={style.root}>\n                <Grid item xs={2} md={1}><Avatar src={getUserProfileImg(userState.profile_picture)} alt={userState.username}/></Grid>\n                <Grid container xs={10} md={11}>\n                    <Grid item xs={12}><SpecialTextField textRef={tweetText}/></Grid>\n                    {mediaPrev != \"\" ? <Grid item xs={12}><img width={200} height={200} src={mediaPrev} /> </Grid>: null}\n                    <Grid container alignItems={\"center\"} justify={\"space-between\"} className={style.actionsLayout}>\n                        <Grid container xs>\n                            <Grid item><IconButton component={\"label\"}><MediaIcon/><input onChange={onMediaChange}\n                                                                                          id={\"media\"} type={\"file\"}\n                                                                                          accept={\"image/*\"}\n                                                                                          hidden/></IconButton></Grid>\n                            <Grid item><IconButton><GifIcon/></IconButton></Grid>\n                            <Grid item><IconButton><PollIcon/></IconButton></Grid>\n                            <Grid item><IconButton><EmojiIcon/></IconButton></Grid>\n                            <Grid item><IconButton><ScheduleIcon/></IconButton></Grid>\n                        </Grid>\n                        <Grid item xs={3} sm={3} md={2} lg={2}>\n                            <Button variant={\"contained\"} onClick={onSend} disableElevation color={\"secondary\"}\n                                    className={style.sendButton}>Tweet</Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n            {isStateLoading(createState) ? <LinearProgress/> : null}\n            <Divider/>\n        </>\n    );\n}\n\nconst mapStateToProp = state => ({\n    createState: state.createTweet,\n    userState: state.user\n});\n\nconst mapActionsToProp = dispatch => ({\n    createTweet: (tweet, fallback, shit) => dispatch(createTweet(tweet, fallback, shit)),\n});\n\nexport default connect(mapStateToProp, mapActionsToProp)(TweetWriter);","/Users/moog/react/twitter-react/src/components/EditProfile.js",["235","236"],"import React, {useRef, useState} from \"react\";\nimport {EditProfileStyle} from \"./EditProfileStyle\";\nimport {Button, useMediaQuery} from \"@material-ui/core\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport useTheme from \"@material-ui/core/styles/useTheme\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport TextField from \"@material-ui/core/TextField\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport AddAPhotoIcon from '@material-ui/icons/AddAPhoto';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {updateProfile} from \"../redux/actions\";\nimport {connect} from \"react-redux\";\nimport {isStatePresent} from \"../redux/stateUtils\";\n\nfunction EditProfile({profile, open, setOpen, updateUserProfile}) {\n\tconst style = EditProfileStyle();\n\tconst fullScreen = useMediaQuery(useTheme().breakpoints.down('sm'));\n\n\tconst [bioInput, setBio] = useState(isStatePresent(updateUserProfile) ? updateUserProfile.bio : profile.bio);\n\tconst [nameInput, setName] = useState(isStatePresent(updateUserProfile) ? updateUserProfile.name : profile.name);\n\tconst [profilePic, setProfilePic] = useState(null);\n\tconst [headerPic, setHeaderPic] = useState(null);\n\tconst [profilePicPrev, setProfilePicPrev] = useState(profile.profile_picture);\n\tconst [headerPicPrev, setHeaderPicPrev] = useState(profile.header_picture);\n\n\tfunction handleChangeHeader(ev) {\n\t\tconst file = ev.target.files[0];\n\t\tsetHeaderPic(file);\n\n\t\tlet reader = new FileReader();\n\t\treader.onload = ev1 => setHeaderPicPrev(ev1.target.result);\n\t\treader.readAsDataURL(file);\n\t}\n\n\tconst deleteHeader = () => setHeaderPic(null);\n\n\tfunction handleChangeProfile(ev) {\n\t\tconst file = ev.target.files[0];\n\t\tsetProfilePic(file);\n\n\t\tlet reader = new FileReader();\n\t\treader.onload = ev1 => setProfilePicPrev(ev1.target.result);\n\t\treader.readAsDataURL(file);\n\t}\n\n\tconst deleteProfilePic = () => setProfilePic(null);\n\n\tconst updateProfile = e => {\n\t\te.preventDefault();\n\t\tconst np = {\n\t\t\tusername: profile.username,\n\t\t\tname: nameInput,\n\t\t\tbio: bioInput,\n\t\t\tprofilePicture: profilePic,\n\t\t\theader: headerPic,\n\t\t};\n\t\tupdateUserProfile(np);\n\t\tsetOpen(false);\n\t};\n\n\treturn (\n\t\t<Dialog\n\t\t\tclassName={style.root}\n\t\t\tfullScreen={fullScreen}\n\t\t\topen={open}\n\t\t\tfullWidth\n\t\t\tmaxWidth={\"sm\"}\n\t\t\tonClose={e => setOpen(false)}\n\t\t\taria-labelledby=\"responsive-dialog-title\">\n\t\t\t<DialogActions style={{paddingTop: \"20px\"}}>\n\t\t\t\t<IconButton onClick={e => setOpen(false)} color=\"primary\" className={style.close}>\n\t\t\t\t\t<CancelIcon/>\n\t\t\t\t</IconButton>\n\t\t\t\t<DialogTitle id=\"title\" style={{left: \"50px\", position: \"absolute\"}}>{\"Edit Profile\"}</DialogTitle>\n\t\t\t\t<Button type=\"submit\" color=\"primary\" variant=\"contained\" className={style.edit} disableElevation onClick={updateProfile}>\n\t\t\t\t\tEdit Profile\n\t\t\t\t</Button>\n\t\t\t</DialogActions>\n\t\t\t<DialogContent>\n\t\t\t\t<IconButton component={\"label\"} className={style.addHeaderIcon}>\n\t\t\t\t\t<AddAPhotoIcon /> <input onChange={handleChangeHeader}\n\t\t\t\t\t\t\t\t\t\t\t id={\"media\"} type={\"file\"}\n\t\t\t\t\t\t\t\t\t\t\t accept={\"image/*\"}\n\t\t\t\t\t\t\t\t\t\t\t hidden/>\n\t\t\t\t</IconButton>\n\t\t\t\t<IconButton className={style.deleteIcon} onClick={deleteHeader}>\n\t\t\t\t\t<HighlightOffIcon/>\n\t\t\t\t</IconButton>\n\t\t\t\t<CardMedia image={headerPicPrev} className={style.header}/>\n\t\t\t\t<IconButton className={style.addProfileIcon} component={\"label\"} >\n\t\t\t\t\t<AddAPhotoIcon /><input onChange={handleChangeProfile}\n\t\t\t\t\t\t\t\t\t\t\tid={\"media\"} type={\"file\"}\n\t\t\t\t\t\t\t\t\t\t\taccept={\"image/*\"}\n\t\t\t\t\t\t\t\t\t\t\thidden/>\n\t\t\t\t</IconButton>\n\t\t\t\t<CardMedia image={profilePicPrev} className={style.profile}/>\n\t\t\t</DialogContent>\n\t\t\t<DialogContent>\n\t\t\t\t<TextField\n\t\t\t\t\tautoFocus\n\t\t\t\t\tmargin=\"dense\"\n\t\t\t\t\tid=\"name\"\n\t\t\t\t\tlabel=\"Name\"\n\t\t\t\t\tdefaultValue={profile.name}\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tfullWidth\n\t\t\t\t\trequired\n\t\t\t\t\tonChange={event => setName(event.target.value)}\n\t\t\t\t/>\n\t\t\t</DialogContent>\n\t\t\t<DialogContent>\n\t\t\t\t<TextField\n\t\t\t\t\tmargin=\"dense\"\n\t\t\t\t\tid=\"bio\"\n\t\t\t\t\tlabel=\"Bio\"\n\t\t\t\t\tdefaultValue={profile.bio}\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tmultiline\n\t\t\t\t\trows={3}\n\t\t\t\t\tfullWidth\n\t\t\t\t\tonChange={event => setBio(event.target.value)}\n\t\t\t\t/>\n\t\t\t</DialogContent>\n\t\t</Dialog>\n\t);\n}\n\nconst mapStateToProp = state => ({\n});\n\nconst mapActionsToProp = dispatch => ({\n\tupdateUserProfile: (newProfile) => dispatch(updateProfile(newProfile)),\n});\n\nexport default connect(mapStateToProp, mapActionsToProp)(EditProfile);\n","/Users/moog/react/twitter-react/src/components/Tweet.js",["237"],"import React, {useState} from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {TweetStyle} from \"./TweetStyle\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {\n    BarChart as StatIcon,\n    Bookmark as BookmarkFilledIcon,\n    BookmarkBorder as BookmarkIcon,\n    Comment as CommentIcon,\n    DeleteForever as DeleteIcon,\n    Favorite as LikeFilledIcon,\n    FavoriteBorder as LikeIcon,\n    Repeat as RetweetIcon\n} from '@material-ui/icons';\nimport TweetText from \"./TweetText\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport {Link, useRouteMatch} from \"react-router-dom\";\nimport TweetDialog from \"./TweetDialog\";\nimport {\n    BASE_URL,\n    deleteLike,\n    deleteRetweet,\n    deleteTweet,\n    getProfile,\n    likeTweet,\n    retweet\n} from \"../redux/actions\";\nimport {connect} from \"react-redux\";\nimport {isStatePresent} from \"../redux/stateUtils\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Button from \"@material-ui/core/Button\";\nimport {Link as UILink} from \"@material-ui/core\";\nimport ListDialog from \"./ListDialog\";\n\nexport const TWEET_NORMAL = 0;\nexport const TWEET_DETAIL = 1;\nexport const TWEET_REPLY = 2;\n\nconst getNameBP = (type) => type === TWEET_DETAIL ? 12 : \"auto\";\n\nconst getCommentsCount = (tweet) => tweet.comments != null ? tweet.comments.length : tweet.comments_count;\n\nconst getTopDateVisibility = (type) => type === TWEET_DETAIL ? \"none\" : \"block\";\n\nfunction Tweet({\n                   type = TWEET_NORMAL, tweet, username,\n                   actionResult, deleteTweet, userState, profilePic,\n                   likeTweet, unlikeTweet, retweet, deleteRetweet, list, getProfile, loc, fallback, shit\n               }) {\n    const classes = TweetStyle();\n    const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n    const [openLikeDialog, setOpenLikeDialog] = useState(false);\n    const [openRetweetDialog, setOpenRetweetDialog] = useState(false);\n    let {url} = useRouteMatch();\n    /*\n    What does each tweet have:\n        liked? (by me),\n        likeCount\n        media,\n        owner -> bio, name, profile_picture, username\n        parents\n        retweeted? (by me),\n        retweetCount\n        text\n        time\n     */\n\n    if (isStatePresent(actionResult) && actionResult.id === tweet.id) {\n        tweet.liked = actionResult.liked;\n        tweet.retweeted = actionResult.retweeted;\n        tweet.likes_count = actionResult.likes_count;\n        tweet.retweets_count = actionResult.retweets_count;\n    }\n\n\n    const bookmarked = false;\n    const myTweet = username === tweet.owner.username;\n    const tweetText = tweet.text;\n    let like = tweet.liked;\n    let retweeted = tweet.retweeted;\n    const commentCount = getCommentsCount(tweet);\n    const likesCount = tweet.likes_count;\n    const retweetsCount = tweet.retweets_count;\n\n    const [commentDialogOpen, setCommentDialogOpen] = useState(false);\n    const onCommentHandle = (ev) => {\n        ev.stopPropagation();\n        ev.preventDefault();\n        if (isStatePresent(userState))\n            setCommentDialogOpen(true);\n    }\n\n    const onLike = (ev) => {\n        ev.stopPropagation();\n        ev.preventDefault();\n        if (like) unlikeTweet(tweet.id);\n        else likeTweet(tweet.id);\n        like = !like;\n    };\n\n    const onRetweet = (ev) => {\n        ev.stopPropagation();\n        ev.preventDefault();\n        if (retweeted) deleteRetweet(tweet.id);\n        else retweet(tweet.id);\n        retweeted = !retweeted;\n    };\n\n    const onDeleteButton = (ev) => {\n        ev.stopPropagation();\n        ev.preventDefault();\n        setDeleteDialogOpen(true);\n    };\n\n\n    const onDeleteCancel = ev => setDeleteDialogOpen(false);\n    const onDeleteConfirm = ev => {\n        setDeleteDialogOpen(false);\n        deleteTweet(tweet.id, loc);\n    }\n\n\n    const goHome = () => {\n        getProfile(userState.token, userState.username);\n    }\n\n    const content = (<Grid container className={classes.root}>\n        <Grid item xs={2} md={1}><Avatar\n            src={profilePic}/></Grid>\n        <Grid container className={classes.tweetHeader} xs={10} md={11} spacing={1}>\n            <Grid container xs={12} alignItems={\"center\"} justify={\"space-between\"}>\n                <Grid container item xs>\n                    <Grid item xs={getNameBP(type)}><Typography display={\"inline\"}\n                                                                className={classes.name}>{tweet.owner.name}</Typography></Grid>\n                    <Grid item><Typography display={\"inline\"} className={classes.id} onClick={goHome} component={Link}\n                                           to={`${url.slice(0, -url.indexOf('/'))}/profile/${tweet.owner.username}`}>@{tweet.owner.username}</Typography></Grid>\n                    <Grid item><Typography display={\"inline\"} style={{display: getTopDateVisibility(type)}}\n                                           className={classes.date}>{tweet.date}</Typography></Grid>\n                </Grid>\n                <Grid item xs={1}>{tweet.owner.username === userState.username ? <IconButton onClick={onDeleteButton}\n                                                                                             onMouseDown={event => event.stopPropagation()}><DeleteIcon/></IconButton> : null}</Grid>\n            </Grid>\n            <Grid item xs={12}><TweetText value={tweetText} textStyle={classes.tweetText}/></Grid>\n            {tweet.media !== \"\" ?\n                <Grid item xs={12}><img className={classes.media} src={`${BASE_URL}/${tweet.media}`}/> </Grid> : null}\n            {type === TWEET_DETAIL ? <Grid item xs={12}><Typography color={\"secondary\"}\n                                                                    variant={\"subtitle2\"}>{tweet.time}</Typography></Grid> : null}\n            <Divider/>\n            {type === TWEET_DETAIL ?\n                <Grid container xs={12}>\n                    <Typography component={UILink} onClick={() => setOpenRetweetDialog(true)}\n                                className={classes.list}>Retweets</Typography>\n                    <Typography component={UILink} onClick={() => setOpenLikeDialog(true)}\n                                className={classes.list}>Likes</Typography>\n                </Grid>\n                : null}\n            <Divider/>\n            {type === TWEET_DETAIL ? <Divider/> : null}\n            <Grid item container justify={\"space-between\"} className={classes.tweetActions} xs={12}>\n                <Grid item>\n                    <IconButton onClick={onCommentHandle} onMouseDown={event => event.stopPropagation()}><CommentIcon/></IconButton>\n                    <Typography display={\"inline\"} className={classes.actionText}>{commentCount}</Typography>\n                </Grid>\n                <Grid item>\n                    <IconButton onClick={onRetweet} onMouseDown={event => event.stopPropagation()}\n                                className={retweeted ? classes.retweetStyle : null}><RetweetIcon/></IconButton>\n                    <Typography display={\"inline\"} className={classes.actionText}>{retweetsCount}</Typography>\n                </Grid>\n                <Grid item>\n                    <IconButton onClick={onLike} onMouseDown={event => event.stopPropagation()}\n                                className={classes.likeStyle}>{like ? <LikeFilledIcon/> :\n                        <LikeIcon/>}</IconButton>\n                    <Typography display={\"inline\"} className={classes.actionText}>{likesCount}</Typography>\n                </Grid>\n                <Grid item><IconButton onClick={event => event.stopPropagation()}\n                                       onMouseDown={event => event.stopPropagation()}\n                                       className={classes.bookmarkStyle}>\n                    {bookmarked ? <BookmarkFilledIcon/> : <BookmarkIcon/>}</IconButton></Grid>\n                {myTweet ? <Grid item><IconButton><StatIcon/></IconButton></Grid> : null}\n            </Grid>\n        </Grid>\n\n    </Grid>);\n\n    return (\n        <Card square>\n            <ListDialog name={\"Likes\"} list={list !== undefined && \"likes\" in list ? list.likes : null}\n                        open={openLikeDialog} setOpen={setOpenLikeDialog}/>\n            <ListDialog name={\"Retweets\"} list={list !== undefined && \"retweets\" in list ? list.retweets : null}\n                        open={openRetweetDialog} setOpen={setOpenRetweetDialog}/>\n            <Dialog\n                disableBackdropClick\n                disableEscapeKeyDown\n                maxWidth=\"xs\"\n                aria-labelledby=\"confirmation-dialog-title\"\n                open={deleteDialogOpen}>\n                <DialogTitle>Delete Tweet</DialogTitle>\n                <DialogContent>Tweet will be deleted permanently.</DialogContent>\n                <DialogActions>\n                    <Button autoFocus onClick={onDeleteCancel} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={onDeleteConfirm} color=\"primary\">\n                        Delete\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            <TweetDialog open={commentDialogOpen} setOpen={setCommentDialogOpen} parent={tweet.id} fallback={fallback}\n                         shit={shit}/>\n            {type !== TWEET_DETAIL ?\n                <CardActionArea component={Link} to={`/tweet-detail/${tweet.id}`}>{content}</CardActionArea> : content}\n            <Divider/>\n        </Card>\n    );\n\n}\n\nconst mapStateToProp = state => ({\n    userState: state.user,\n    actionResult: state.tweetAction,\n});\n\nconst mapActionsToProp = dispatch => ({\n    likeTweet: (id) => dispatch(likeTweet(id)),\n    unlikeTweet: (id) => dispatch(deleteLike(id)),\n    retweet: (id) => dispatch(retweet(id)),\n    deleteRetweet: (id) => dispatch(deleteRetweet(id)),\n    deleteTweet: (id, loc) => dispatch(deleteTweet(id, loc)),\n    getProfile: (token, username) => dispatch(getProfile(token, username)),\n});\n\nexport default connect(mapStateToProp, mapActionsToProp)(Tweet);","/Users/moog/react/twitter-react/src/components/FollowDialog.js",[],"/Users/moog/react/twitter-react/src/components/Logs.js",[],"/Users/moog/react/twitter-react/src/components/SpecialTextField.js",[],"/Users/moog/react/twitter-react/src/components/TweetWriterStyle.js",[],"/Users/moog/react/twitter-react/src/components/ListDialog.js",["238"],"import React, {useState} from \"react\";\nimport {Tab, Tabs, useMediaQuery, useTheme} from \"@material-ui/core\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport SwipeableViews from \"react-swipeable-views\";\nimport Identity from \"./Identity\";\nimport {isStatePresent} from \"../redux/stateUtils\";\n\n\nfunction TabPanel(props) {\n\tconst { children, value, index, ...other } = props;\n\t\n\treturn (\n\t\t<div role=\"tabpanel\" hidden={value !== index} id={`full-width-tabpanel-${index}`}\n\t\t     aria-labelledby={`full-width-tab-${index}`}{...other}>\n\t\t\t{value === index && (<Box p={3}><Typography>{children}</Typography></Box>)}\n\t\t</div>\n\t);\n}\n\n\n\nfunction a11yProps(index) {\n\treturn {\n\t\tid: `full-width-tab-${index}`,\n\t\t'aria-controls': `full-width-tabpanel-${index}`,\n\t};\n}\n\n\nfunction ListDialog({name, list, open, setOpen}) {\n\tconst theme = useTheme();\n\tconst fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\t\n\tconst [dialogSelectedTab, setDialogSelectedTab] = useState(0);\n\tconst handleDialogTabChange = (event, newValue) => setDialogSelectedTab(newValue);\n\t\n\tconst handleClose = () => setOpen(false);\n\t\n\t\n\treturn (\n\t\t<Dialog\n\t\t\tfullScreen={fullScreen}\n\t\t\topen={open}\n\t\t\tfullWidth\n\t\t\tmaxWidth={\"sm\"}\n\t\t\tonClose={handleClose}\n\t\t\taria-labelledby=\"responsive-dialog-title\">\n\t\t\t<DialogTitle id=\"responsive-dialog-title\">{\"Follow List\"}</DialogTitle>\n\t\t\t<DialogContent>\n\t\t\t\t<Tabs value={dialogSelectedTab} onChange={handleDialogTabChange} indicatorColor=\"primary\"\n\t\t\t\t      textColor=\"primary\" variant=\"fullWidth\" aria-label=\"full width tabs example\">\n\t\t\t\t\t<Tab label={name} {...a11yProps(0)} />\n\t\t\t\t</Tabs>\n\t\t\t\t<SwipeableViews axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'} index={dialogSelectedTab}>\n\t\t\t\t\t<TabPanel value={dialogSelectedTab} index={0} dir={theme.direction}>\n\t\t\t\t\t\t{list !== null ? list.map((each,i) => <Identity key={i} closeDialog={handleClose} identity={each}/>) : null}\n\t\t\t\t\t</TabPanel>\n\t\t\t\t</SwipeableViews>\n\t\t\t</DialogContent>\n\t\t\t<DialogActions>\n\t\t\t\t<Button autoFocus onClick={handleClose} color=\"primary\">Close</Button>\n\t\t\t</DialogActions>\n\t\t</Dialog>\n\t);\n\t\n}\n\n\n\nexport default ListDialog;","/Users/moog/react/twitter-react/src/components/Log.js",[],"/Users/moog/react/twitter-react/src/components/LogsStyle.js",[],"/Users/moog/react/twitter-react/src/components/TweetText.js",["239","240","241","242","243","244","245","246","247"],"import React from \"react\";\nimport {makeStyles} from \"@material-ui/core\";\nimport {Link} from \"@material-ui/core\";\n\nconst URL_REGEX = /[(http(s)?):\\/\\/(www\\.)?a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/gi;\nconst HASHTAG_REGEX = /#[\\w_]+/gi;\nconst HANDLER_REGEX = /@[\\w_]+/gi;\nconst PURE = /[^\\n\\w\\t\\f\\v@#\\.]/i;\n\nfunction mapEach(value, level) {\n    if (value.length === 1){\n        let space = level === 0 ? ' ' :  '';\n        return <a >{`${space}${value}`}</a>;\n    }\n    let result = value.match(PURE);\n    if (result !== null) {\n        return <span>\n            {mapEach(value.slice(0,result.index), 1)}\n            {mapEach(value.slice(result.index,result.index+1),1)}\n            {mapEach(value.slice(result.index+1),1)}\n        </span>;\n    } else {\n        if (HASHTAG_REGEX.test(value)) return <span>{' '}<Link display={\"inline\"} onClick={event => event.stopPropagation()} color={\"secondary\"} href={`/explore?query=${value.slice(1)}`}>{`${value}`}</Link></span>;\n        else if (HANDLER_REGEX.test(value)) return <span>{' '}<Link display={\"inline\"} onClick={event => event.stopPropagation()} color={\"secondary\"} href={`/profile/${value.slice(1)}`}>{`${value}`}</Link></span>;\n        else if (URL_REGEX.test(value)) return <span>{' '}<Link display={\"inline\"} onClick={event => event.stopPropagation()} color={\"secondary\"} href={`http://${value}`}>{`${value}`}</Link></span>;\n        else return <a>{` ${value}`}</a>;\n    }\n}\n\nexport default function TweetText({value, textStyle}) {\n\n    return (\n        <div className={textStyle}>\n            {value.split(/\\n/)\n                .map(each => (\n                    <span>\n                        {each.trim().split(/\\s/).map( second=>mapEach(second,0))}\n                        <br/>\n                    </span>\n                ))}\n        </div>\n    )\n}","/Users/moog/react/twitter-react/src/components/TweetStyle.js",[],"/Users/moog/react/twitter-react/src/components/EditProfileStyle.js",[],"/Users/moog/react/twitter-react/src/components/NotificationsStyle.js",[],"/Users/moog/react/twitter-react/src/components/ProfileStyle.js",[],"/Users/moog/react/twitter-react/src/components/PopHashtagListStyle.js",[],"/Users/moog/react/twitter-react/src/components/ExploreStyle.js",[],{"ruleId":"248","replacedBy":"249"},{"ruleId":"250","replacedBy":"251"},{"ruleId":"252","severity":1,"message":"253","line":71,"column":8,"nodeType":"254","endLine":71,"endColumn":10,"suggestions":"255"},{"ruleId":"256","severity":1,"message":"257","line":28,"column":5,"nodeType":"258","messageId":"259","endLine":28,"endColumn":20},{"ruleId":"256","severity":1,"message":"260","line":29,"column":5,"nodeType":"258","messageId":"259","endLine":29,"endColumn":23},{"ruleId":"256","severity":1,"message":"261","line":30,"column":5,"nodeType":"258","messageId":"259","endLine":30,"endColumn":20},{"ruleId":"256","severity":1,"message":"262","line":31,"column":5,"nodeType":"258","messageId":"259","endLine":31,"endColumn":22},{"ruleId":"256","severity":1,"message":"263","line":32,"column":5,"nodeType":"258","messageId":"259","endLine":32,"endColumn":25},{"ruleId":"256","severity":1,"message":"264","line":33,"column":5,"nodeType":"258","messageId":"259","endLine":33,"endColumn":22},{"ruleId":"256","severity":1,"message":"265","line":34,"column":5,"nodeType":"258","messageId":"259","endLine":34,"endColumn":17},{"ruleId":"256","severity":1,"message":"266","line":35,"column":5,"nodeType":"258","messageId":"259","endLine":35,"endColumn":20},{"ruleId":"256","severity":1,"message":"267","line":36,"column":5,"nodeType":"258","messageId":"259","endLine":36,"endColumn":17},{"ruleId":"256","severity":1,"message":"268","line":37,"column":5,"nodeType":"258","messageId":"259","endLine":37,"endColumn":21},{"ruleId":"256","severity":1,"message":"269","line":38,"column":5,"nodeType":"258","messageId":"259","endLine":38,"endColumn":24},{"ruleId":"256","severity":1,"message":"270","line":39,"column":5,"nodeType":"258","messageId":"259","endLine":39,"endColumn":21},{"ruleId":"256","severity":1,"message":"271","line":40,"column":11,"nodeType":"258","messageId":"259","endLine":40,"endColumn":27},{"ruleId":"256","severity":1,"message":"272","line":17,"column":6,"nodeType":"258","messageId":"259","endLine":17,"endColumn":11},{"ruleId":"252","severity":1,"message":"273","line":15,"column":8,"nodeType":"254","endLine":15,"endColumn":10,"suggestions":"274"},{"ruleId":"252","severity":1,"message":"275","line":25,"column":8,"nodeType":"254","endLine":25,"endColumn":12,"suggestions":"276"},{"ruleId":"256","severity":1,"message":"277","line":7,"column":8,"nodeType":"258","messageId":"259","endLine":7,"endColumn":18},{"ruleId":"256","severity":1,"message":"278","line":8,"column":20,"nodeType":"258","messageId":"259","endLine":8,"endColumn":36},{"ruleId":"256","severity":1,"message":"279","line":10,"column":9,"nodeType":"258","messageId":"259","endLine":10,"endColumn":23},{"ruleId":"252","severity":1,"message":"280","line":18,"column":8,"nodeType":"254","endLine":18,"endColumn":10,"suggestions":"281"},{"ruleId":"256","severity":1,"message":"282","line":9,"column":9,"nodeType":"258","messageId":"259","endLine":9,"endColumn":19},{"ruleId":"256","severity":1,"message":"283","line":4,"column":8,"nodeType":"258","messageId":"259","endLine":4,"endColumn":12},{"ruleId":"256","severity":1,"message":"284","line":5,"column":8,"nodeType":"258","messageId":"259","endLine":5,"endColumn":22},{"ruleId":"256","severity":1,"message":"285","line":7,"column":8,"nodeType":"258","messageId":"259","endLine":7,"endColumn":14},{"ruleId":"256","severity":1,"message":"286","line":8,"column":8,"nodeType":"258","messageId":"259","endLine":8,"endColumn":18},{"ruleId":"256","severity":1,"message":"287","line":10,"column":8,"nodeType":"258","messageId":"259","endLine":10,"endColumn":14},{"ruleId":"256","severity":1,"message":"288","line":11,"column":8,"nodeType":"258","messageId":"259","endLine":11,"endColumn":15},{"ruleId":"256","severity":1,"message":"289","line":12,"column":8,"nodeType":"258","messageId":"259","endLine":12,"endColumn":18},{"ruleId":"256","severity":1,"message":"290","line":13,"column":8,"nodeType":"258","messageId":"259","endLine":13,"endColumn":17},{"ruleId":"256","severity":1,"message":"291","line":14,"column":8,"nodeType":"258","messageId":"259","endLine":14,"endColumn":13},{"ruleId":"252","severity":1,"message":"292","line":52,"column":8,"nodeType":"254","endLine":52,"endColumn":18,"suggestions":"293"},{"ruleId":"256","severity":1,"message":"294","line":160,"column":12,"nodeType":"258","messageId":"259","endLine":160,"endColumn":16},{"ruleId":"256","severity":1,"message":"295","line":12,"column":2,"nodeType":"258","messageId":"259","endLine":12,"endColumn":12},{"ruleId":"256","severity":1,"message":"296","line":13,"column":2,"nodeType":"258","messageId":"259","endLine":13,"endColumn":15},{"ruleId":"256","severity":1,"message":"297","line":14,"column":2,"nodeType":"258","messageId":"259","endLine":14,"endColumn":13},{"ruleId":"256","severity":1,"message":"298","line":14,"column":15,"nodeType":"258","messageId":"259","endLine":14,"endColumn":25},{"ruleId":"256","severity":1,"message":"299","line":15,"column":2,"nodeType":"258","messageId":"259","endLine":15,"endColumn":11},{"ruleId":"256","severity":1,"message":"300","line":16,"column":2,"nodeType":"258","messageId":"259","endLine":16,"endColumn":9},{"ruleId":"301","severity":1,"message":"302","line":59,"column":32,"nodeType":"303","messageId":"304","endLine":59,"endColumn":34},{"ruleId":"305","severity":1,"message":"306","line":59,"column":59,"nodeType":"307","endLine":59,"endColumn":107},{"ruleId":"256","severity":1,"message":"308","line":1,"column":16,"nodeType":"258","messageId":"259","endLine":1,"endColumn":22},{"ruleId":"256","severity":1,"message":"309","line":50,"column":8,"nodeType":"258","messageId":"259","endLine":50,"endColumn":24},{"ruleId":"305","severity":1,"message":"306","line":152,"column":36,"nodeType":"307","endLine":152,"endColumn":103},{"ruleId":"256","severity":1,"message":"279","line":12,"column":9,"nodeType":"258","messageId":"259","endLine":12,"endColumn":23},{"ruleId":"256","severity":1,"message":"310","line":2,"column":9,"nodeType":"258","messageId":"259","endLine":2,"endColumn":19},{"ruleId":"311","severity":1,"message":"312","line":5,"column":32,"nodeType":"313","messageId":"314","endLine":5,"endColumn":33,"suggestions":"315"},{"ruleId":"311","severity":1,"message":"312","line":5,"column":34,"nodeType":"313","messageId":"314","endLine":5,"endColumn":35,"suggestions":"316"},{"ruleId":"311","severity":1,"message":"317","line":5,"column":40,"nodeType":"313","messageId":"314","endLine":5,"endColumn":41,"suggestions":"318"},{"ruleId":"311","severity":1,"message":"319","line":5,"column":58,"nodeType":"313","messageId":"314","endLine":5,"endColumn":59,"suggestions":"320"},{"ruleId":"311","severity":1,"message":"319","line":5,"column":101,"nodeType":"313","messageId":"314","endLine":5,"endColumn":102,"suggestions":"321"},{"ruleId":"311","severity":1,"message":"317","line":8,"column":29,"nodeType":"313","messageId":"314","endLine":8,"endColumn":30,"suggestions":"322"},{"ruleId":"323","severity":1,"message":"324","line":13,"column":16,"nodeType":"307","endLine":13,"endColumn":20},{"ruleId":"323","severity":1,"message":"324","line":26,"column":21,"nodeType":"307","endLine":26,"endColumn":24},"no-native-reassign",["325"],"no-negated-in-lhs",["326"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getNotifications' and 'notifications'. Either include them or remove the dependency array. If 'getNotifications' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["327"],"no-unused-vars","'LIKE_TWEET_INIT' is defined but never used.","Identifier","unusedVar","'LIKE_TWEET_SUCCESS' is defined but never used.","'LIKE_TWEET_FAIL' is defined but never used.","'UNLIKE_TWEET_INIT' is defined but never used.","'UNLIKE_TWEET_SUCCESS' is defined but never used.","'UNLIKE_TWEET_FAIL' is defined but never used.","'RETWEET_INIT' is defined but never used.","'RETWEET_SUCCESS' is defined but never used.","'RETWEET_FAIL' is defined but never used.","'DEL_RETWEET_INIT' is defined but never used.","'DEL_RETWEET_SUCCESS' is defined but never used.","'DEL_RETWEET_FAIL' is defined but never used.","'handleDialogOpen' is assigned a value but never used.","'query' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getTimeline'. Either include it or remove the dependency array. If 'getTimeline' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["328"],"React Hook useEffect has a missing dependency: 'getTweetById'. Either include it or remove the dependency array. If 'getTweetById' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["329"],"'PopHashtag' is defined but never used.","'notificationList' is defined but never used.","'isStatePresent' is defined but never used.","React Hook useEffect has a missing dependency: 'getTrends'. Either include it or remove the dependency array. If 'getTrends' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["330"],"'READ_COUNT' is defined but never used.","'Card' is defined but never used.","'CardActionArea' is defined but never used.","'Avatar' is defined but never used.","'Typography' is defined but never used.","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'SearchIcon' is defined but never used.","'InputBase' is defined but never used.","'Tweet' is defined but never used.","React Hook useEffect has missing dependencies: 'getFollowList', 'getLogs', and 'getUserProfile'. Either include them or remove the dependency array. If 'getUserProfile' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["331"],"'user' is assigned a value but never used.","'deleteLike' is defined but never used.","'deleteRetweet' is defined but never used.","'deleteTweet' is defined but never used.","'getProfile' is defined but never used.","'likeTweet' is defined but never used.","'retweet' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useRef' is defined but never used.","'deleteProfilePic' is assigned a value but never used.","'makeStyles' is defined but never used.","no-useless-escape","Unnecessary escape character: \\/.","Literal","unnecessaryEscape",["332","333"],["334","335"],"Unnecessary escape character: \\..",["336","337"],"Unnecessary escape character: \\+.",["338","339"],["340","341"],["342","343"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation",{"desc":"344","fix":"345"},{"desc":"346","fix":"347"},{"desc":"348","fix":"349"},{"desc":"350","fix":"351"},{"desc":"352","fix":"353"},{"messageId":"354","fix":"355","desc":"356"},{"messageId":"357","fix":"358","desc":"359"},{"messageId":"354","fix":"360","desc":"356"},{"messageId":"357","fix":"361","desc":"359"},{"messageId":"354","fix":"362","desc":"356"},{"messageId":"357","fix":"363","desc":"359"},{"messageId":"354","fix":"364","desc":"356"},{"messageId":"357","fix":"365","desc":"359"},{"messageId":"354","fix":"366","desc":"356"},{"messageId":"357","fix":"367","desc":"359"},{"messageId":"354","fix":"368","desc":"356"},{"messageId":"357","fix":"369","desc":"359"},"Update the dependencies array to be: [getNotifications, notifications]",{"range":"370","text":"371"},"Update the dependencies array to be: [getTimeline]",{"range":"372","text":"373"},"Update the dependencies array to be: [getTweetById, id]",{"range":"374","text":"375"},"Update the dependencies array to be: [getTrends]",{"range":"376","text":"377"},"Update the dependencies array to be: [getFollowList, getLogs, getUserProfile, username]",{"range":"378","text":"379"},"removeEscape",{"range":"380","text":"381"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"382","text":"383"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"384","text":"381"},{"range":"385","text":"383"},{"range":"386","text":"381"},{"range":"387","text":"383"},{"range":"388","text":"381"},{"range":"389","text":"383"},{"range":"390","text":"381"},{"range":"391","text":"383"},{"range":"392","text":"381"},{"range":"393","text":"383"},[2234,2236],"[getNotifications, notifications]",[474,476],"[getTimeline]",[796,800],"[getTweetById, id]",[626,628],"[getTrends]",[1851,1861],"[getFollowList, getLogs, getUserProfile, username]",[145,146],"",[145,145],"\\",[147,148],[147,147],[153,154],[153,153],[171,172],[171,171],[214,215],[214,214],[330,331],[330,330]]